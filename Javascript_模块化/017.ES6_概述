 
//=========================================== 概述
//=========================================== 概述

历史上，JavaScript 一直没有模块（module）体系，
无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。

其他语言都有这项功能，比如 Ruby 的require、Python 的import，
甚至就连 CSS 都有@import，
但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。


//===========================================
在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。
前者用于服务器，后者用于浏览器。

ES6 在语言标准的层面上，实现了模块功能，
而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，
成为浏览器和服务器通用的模块解决方案。

//===========================================ES6 模块的"设计思想"
//===========================================ES6 模块的"设计思想"
	尽量的"静态化"，使得编译时就能"确定模块的依赖关系"、"输入和输出"的变量。

	//====================旧的 "运行时加载"
	//====================旧的 "运行时加载"
	CommonJS 和 AMD 模块，都只能在运行时确定这些东西。
	
	/**
	比如，CommonJS 模块就是对象，输入时必须查找对象属性。

	// CommonJS模块
	let { stat, exists, readFile } = require('fs');
	或写成
	let _fs = require('fs');
	let stat = _fs.stat;
	let exists = _fs.exists;
	let readfile = _fs.readfile;
		
		说明：
			上面代码的实质是整体加载fs模块（即加载fs的所有方法），
			生成一个对象（_fs），
			然后再从这个对象上面读取 3 个方法。
			这种加载称为"运行时加载"
			
			因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。
					//意思是说：运行的时候才有 fs 这个东西，编译时无法确认
					//

	*/

	//====================ES6的 "编译时加载 或叫 静态加载"
	//====================ES6的 "编译时加载 或叫 静态加载"
	ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。

	/**

	// ES6模块
	import { stat, exists, readFile } from 'fs';

	上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。
	这种加载称为"编译时加载 或者 静态加载"，
	即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。
	当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。	

	

	*/

