//======================================================原由
//======================================================原由
面对越来越复杂的JS代码，必须使用模块化策略
目前业界主流的做法是采用"面向对象编辑"
		//======================================
		问题是Javascipt语法不支持"类"（class），
		导致传统的面向对象编程方法无法直接使用。
		
		JS社区做了很多探索，研究如何用Javascript模拟"类"。
		
//======================================================
//======================================================
在面向对象编程中
	类(class)是对象(Object)的模板
	class 定义了同一组对象"又称"实例""共有的属性和方法。
	//==========
	Javascript语言不支持"类"，但是可以用一些变通的方法，模拟出"类"。


//======================================================第一种："构造函数"模拟"类"
//======================================================第一种："构造函数"模拟"类"
	"构造函数"模拟"类"，在其内部用this关键字指代实例对象。
	
	
	//==============定义类
	function Cat(){
		this.name = "大毛";
	}
	//==============定义属性或方法
	Cat.prototype.makeSound = function(){
		alert(" 喵 喵 喵 ！");
	}
	//==============使用
	var c1 = new Cat();
	alert(c1.name);
	c1.makeSound();

//======================================================第二种：Object.create() 法，对象模拟类
//======================================================第二种：Object.create() 法，对象模拟类
	  ES5出了一个新的方法Object.create()。
	  用这个方法，"类"就是一个对象，不是函数。
	  
	/** 
	    如果遇到老式浏览器，可以用下面的代码自行部署。create方法
		可选，放在上面
	　　if (!Object.create) {
	　　　　Object.create = function (o) {
	　　　　　　function F() {}
	　　　　　　F.prototype = o;
	　　　　　　return new F();
	　　　　};
	　　}
	*/
	//================= 定义类
	var Cat = {
		  name: "小毛",
		  makeSound: function(){ alert(" 小 喵 喵 ！");  }
	}
	  
	//=================使用
	var cat1 = Object.create(Cat);
　　alert(cat1.name); // 大毛
　　cat1.makeSound(); // 喵喵喵	  


  
//======================================================第三种： 闭包、极简主义法，对象模拟类，较优解
//======================================================第三种： 闭包、极简主义法，对象模拟类，较优解
	也是用一个对象模拟"类"。
	
	
	//============封装
	//============封装
	
	var Cat = {	//用一个对象模拟"类"。
		createNew: function(){		//createNew()，用来生成实例。
				var cat = {};
				cat.name = "中毛";
				cat.makeSound = function(){ alert(" 中 喵 喵 ！ ");}
				return cat;
		}
	}
 　 var cat1 = Cat.createNew();
    alert(cat1.name);
    cat1.makeSound();	
  
  
    //============继承
    //============继承

	//父类
	var Animal = {
		createNew: function(){
			var animal = {};
			animal.sleep = function(){ alert(" 睡 懒 觉 ！");};
			return animal;
		}
	}
	//子类
	var Cat ={
		createNew: function(){
			var cat = Animal.createNew();
			cat.name = " 大 毛 "
			cat.makeSound = function(){ alert( " 大 喵 喵 ！");}; 
			return cat;
		}
	}
	//使用
	var cat1 = Cat.createNew();
	alert(cat1.name);
	cat1.makeSound();
	cat1.sleep();  
  
  
  
 
    //============私有属性和私有方法
    //============私有属性和私有方法
　　var Cat = {
		//sound : "abc",
　　　　createNew: function(){

　　　　　　var cat = {};
　　　　　　var sound = "喵喵喵";
　　　　　　cat.makeSound = function(){ alert(sound); };
　　　　　　return cat;
　　　　}
　　};

　　var cat1 = Cat.createNew();
　　alert(cat1.sound); // undefined
	cat1.makeSound(); //内部变量sound，外部无法读取，只有通过cat的公有方法makeSound()来读取。
 
    //============数据共享
    //============数据共享
  	var Cat = {
		sound : " 喵 喵 喵 ",
		createNew: function(){
			var cat = {};
			cat.makeSound = function(){ alert(Cat.sound);};
			cat.changeSound = function(x){ Cat.sound = x;};
			return cat;
		}
	}
 
	var cat1 = Cat.createNew();
	var cat2 = Cat.createNew();
	cat1.makeSound();
 
 
	cat2.changeSound(" 啦 啦 啦 ！"); //如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。
	cat1.makeSound();
  
  
