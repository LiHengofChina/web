
CommonJS团队定义了module格式来解决JavaScript作用域问题
这样确保了"每一个module都在自己的命名空间下执行"。
//===========
根据CommonJS的规范，
"每个文件就是一个模块，有自己的作用域"。
在一个文件里面定义的"变量、函数、类"
都是私有的，对其他文件不可见。
//===========
CommonJS规范规定，每个模块内部，
module 变量代表当前模块。
这个变量是一个对象，
它的exports属性（即module.exports）是对外的接口。

加载某个模块，其实是加载该模块的module.exports属性。

//============
CommonJS 给出 2个工具来实现模块之间的依赖

	1). require() 用于在当前作用域引入已有的模块
	2). module object 用于从当前作用域导出一些东东
//============ 示例：
//============ 示例：
salute.js
	var MySalute = "Hello";
	module.exports = MySalute; //导出

world.js
	var MySalute = require("./salute"); //导出
	var Result = MySalute + " world!";
	console.log(Result);
	
	/**
		PS：
			如果这些js在浏览器里面运行，
			会发现它缺少：4个环境变量
				module
				exports
				require
				global
		理论上浏览器只要能提供这四个变量
		就能加载 CommonJS 模块
		网上可以搜索到 "浏览器加载 CommonJS 模块的原理与实现"//TODO，了解即可：Browserify
		
		
	*/

