//============================
//============================

Node.js 的模块可以分为两大类：
	1). 一类是核心模块
			//Node.js 标准 API 中提供的模块，
			//如 fs 、 http 、 net 、 vm 等，
			//这些都是由 Node.js 官方提供的模块，
			//编译成了二进制代码
			我们可以直接通过 require 获取核心模块，例如require('fs') 。
			核心模块拥有最高的加载优先级，
			换言之如果有模块与其命名冲突，
			Node.js 总是会加载核心模块。
	2). 一类是文件模块
			文件模块则是存储为单独的文件（或文件夹）的模块，
			可能是 JavaScript 代码、JSON 或编译好的 C/C++ 代码。
			文件模块的加载方法相对复杂，但十分灵活，尤其是和 npm 结合使用时。
			在不显式指定文件模块扩展名的时候，Node.js 会分别试图加上 .js、.json 和 .node 扩展名。
			.js 是 JavaScript 代码，
			.json 是 JSON 格式的文本，
			.node 是编译好的 C/C++ 代码。		


			
//============================ 文件模块的加载有两种方式
//============================ 文件模块的加载有两种方式
文件模块的加载有两种方式，
一种是按路径加载，
	1). 参数以"/"开头，那么就以绝对路径的方式查找模块名称，
		例如 require('/home/byvoid/module') 将会按照优先级依次尝试加载 
		 /home/byvoid/module.js、 /home/byvoid/module.json 和  /home/byvoid/module.node。
	2).参数以 require 参数以“ ./ ”或“ ../ ”开头
		那么则以相对路径的方式来查找模块，这种方式在应用中是最常见的。


		
一种是查找 node_modules 文件夹。
		如果 require 参数不以“ / ”、“ ./ ”或“ ../ ”开头，
		而该模块又不是核心模块，
		那么就要通过查找 node_modules 加载模块了。
		我们使用npm获取的包通常就是以这种方式加载的。
		//在某个目录下执行命令 npm install express，
		//你会发现出现了一个叫做node_modules的目录，
		// 可以直接使用 require('express') 来代替require('./node_modules/express') 

    //============================重要特性：
	这是Node.js模块加载的一个重要特性：
			通过查找 node_modules 目录来加载模块。
	当 require 遇到一个既不是核心模块，
	又不是以路径形式表示的模块名称时，
	
	会试图在当前目录下的 node_modules 目录中来查找是不是有这样一个模块。
	如果没有找到，则会在当前目录的上一层中的 node_modules 目录中继续查找，
	反复执行这一过程，直到遇到根目录为止。
 
	/**
		示例：
			我们要在 /home/byvoid/develop/foo.js 中使用 require('bar.js') 命令，
			Node.js会依次查找：

		  /home/byvoid/develop/node_modules/bar.js
		  /home/byvoid/node_modules/bar.js
		  /home/node_modules/bar.js
		  /node_modules/bar.js
		为什么要这样做呢？因为通常一个工程内会有一些子目录
		当子目录内的文件需要访问到工程共同依赖的模块时
		就需要向父目录上溯了
		比如说工程的目录结构如下
				|- project
				|- app.js
				|- models
				|- ...
				|- views
				|- ...
				|- controllers
				|- index_controller.js
				|- error_controller.js
				|- ...
				|- node_modules
				|- express
				我们不仅要在 project 目录下的 app.js 中使用 require('express') ，
				而且可能要在controllers 子目录下的index_controller.js 中也使用 require('express') ，
				这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。

	*/

