
https://www.jianshu.com/p/33d53cce8237

//================================================= 背景
//================================================= 背景
随着网站逐渐变成"互联网应用程序"，嵌入网页的Javascript代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等等......开发者不得不使用软件工程的方法，管理网页的业务逻辑。Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。

//================================================= 原由
//================================================= 原由
在ES6之前，Javascript不是一种模块化编程语言，它不支持"类"（class），更别论"模块"（module）了。
ES6将会支持模块化的语法


"模块"就是"实现特定功能的一组方法"，只要把"不同的函数、以及记录状态的变量"简单地放在一起，就算是一个"模块"。

//================================================= 一阶段：原始写法
//================================================= 一阶段：原始写法
　　function m1(){
　　　　//...
　　}
　　function m2(){
　　　　//...
　　}
/**
	说明：
		函数m1()和m2()，组成一个模块。
		使用的时候，直接调用就行了。
		这种做法的缺点很明显："污染"了全局变量，
		无法保证不与其他模块发生变量名冲突，
		而且模块成员之间看不出直接关系。
*/
//================================================= 二阶段：对象写法
//================================================= 二阶段：对象写法
//解决了阶段一的缺点

　　var module1 = new Object({
　　　　_count : 0,
　　　　m1 : function (){
　　　　　　//...
　　　　},
　　　　m2 : function (){
　　　　　　//...
　　　　}
　　});
/** 
	说明：
		函数m1()和m2(），都封装在module1对象里。
		使用的时候，就是调用这个对象的属性。
		module1.m1();但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。
		比如，外部代码可以直接改变内部计数器的值。module1._count = 5;
*/





 





https://www.jianshu.com/p/33d53cce8237

https://www.jianshu.com/p/ad427d8879cb

http://www.ruanyifeng.com/blog/2012/11/require_js.html

