
//===================================== JS 函数创建的几种方式
//===================================== JS 函数创建的几种方式
1). "声明式"函数定义
		这种定义方式:
		会将"函数声明"提升到"该函数所在作用域"的最开头，
		也是就无论你在"这个函数的最小作用域的那儿"使用这种方式声明的函数，
		在这个作用域内，你都可以调用这个函数为你所用。
		//就是说调用的代码可以写在声明的代码前面 
		function  函数(){
			
		};
		
		//示例：
		function sum1(n1,n2){
			return n1 + n2;
		}

2). "函数表达式"，又叫"函数字面量"
	let fun = function(){};
	此方式定义的函数，只能在该作用域中，
	这段赋值代码执行之后才能通过fun()调用函数
 
	否则，由于变量声明提升，fun === undefined。
		var sum2 = function(n1,n2){ return  n1 + n2}
	
	//就是说调用代码必须 写在后面
	//相当于先赋值，再使用
	
3). 
	另外："立即执行函数"严格来说也叫函数表达式
	立即执行函数所加的特殊符号也是为了消除
		"声明式"以"表达式"的歧义
	
	

3). new Function 的方式

	
	1). 会导致解析两次代码  //所以不推荐使用
		//第一次是解析常规ECMAScript代码，第二次是解析传入构造函数中的字符串，
	1). 参数必须加引号
		//Function构造函数所有的参数都是字符串类型
	
	var sum3 = new Function("n1","n2"," return n1+n2");
	alert(sum3(1,2));	

	Function()构造函数每次执行时都会解析函数主体，
	并创建一个新的函数对象，
	所以当在一个循环或频繁执行的函数中调用Function()构造函数效率是非常低的。
	而函数字面量却不是每次遇到都会重新编译的，
	用Function()构造函数创建一个函数时并不遵循典型的作用域，
	它一直把它当作是顶级函数来执行。



//===================================== 总结
//===================================== 总结


　总结：
1 、"声明式"和"函数表达式"实际上是 "new Function 式"的语法糖。
		
		//"语法糖"：指那些没有给计算机语言添加新功能
		//而只是对人类来说更"甜蜜"的语法，它让编程更加便捷


		当我们定义函数时候都会通过 new Function 来创建一个函数，
		只是前两种为我们进行了封装，
		我们看不见了而已

		js 中任意函数都是Function 的实例。

2、ECMAScript 定义的函数"实际上是功能完整的对象"。
			//函数就是===========> 对象 ??
 
 
