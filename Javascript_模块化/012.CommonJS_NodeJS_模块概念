//========================================================================模块 
//========================================================================模块 

	模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。
	换言之，一个Node.js 文件就是一个模块。
	这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。
	还可以是一个文件夹。
	/**
		示例：
			 var http = require('http')， 其中 http是 Node.js 的一个核心模块，
			 其内部是用 C++ 实现的，外部用 JavaScript 封装。
			 我们通过require 函数获取了这个模块，
			 然后才能使用其中的对象。
	*/
		
	
	
//========================================================================创建模块
//========================================================================创建模块
	
	//在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，
	我们要关注的问题仅仅在于如何在"其他文件中获取这个模块"。
	

	Node.js 提供了 exports 和 require 两个对象，
	//exports 是模块公开的接口
	//require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。 
	
	//示例：
	/**
		//module.js
		var name;
		exports.setName = function(thyName){
			name = thyName;
		}
		exports.sayHello = function(){
			console.log( " Hello " + name);
		}
		//getmodule.js
		var myModule = require("./module");
		myModule.setName("liheng");
		myModule.sayHello();
		
		说明：
			module.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，
			在 getmodule.js 中通过 require('./module') 加载这个模块，
			然后就可以直接访问 module.js 中 exports 对象的成员函数了。
			这种接口封装方式比许多语言要简洁得多，同时也不失优雅，
			未引入违反语义的特性，符合传统的编程逻辑。
		PS: 在这个基础上，我们可以构建大型的应用程序，npm 提供的上万个模块都是通过这种简单的方式搭建起来的。
		
		
	*/
	
//======================================================================== exports 与 module.exports
//======================================================================== exports 与 module.exports
module.exports 初始值为一个空对象 {}
exports 是指向的 module.exports 的引用
require() 返回的是 module.exports 而不是 exports

//==========================
exports = module.exports = somethings
等价于
module.exports = somethings
exports = module.exports


原理很简单，
	即 module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，
	那么通过 exports = module.exports 让 exports 重新指向 module.exports 即可。
 
