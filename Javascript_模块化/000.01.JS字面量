//==================================================================字面量
//==================================================================字面量
//============================= 字面量


"字面量" 如何表达这个值
	一般除去表达式，
	给变更赋值时，
	等号右边的都可以认为是"字面量"

//============================= 字面量
	字面量分为
	字符串字面量(string literal )
	数组字面量(array literal)
	对象字面量(object literal)
	另外还有函数字面量(function literal)

//============================= 示例
var test="hello world!";
"hello world!"就是字符串字面量，test是变量名。
 

//==================================================================对象字面量
//==================================================================对象字面量


//======================== 对象字面量
对象字面值是封闭在花括号对({})中的
	一个对象的"零个或多个 '属性名:值' "列表。
 
示例：
	var person={ 
		name:"Jack", 
		age:10,
		5:true  
	};
//=========================== 
1).		{	表示对象字面量的开始
			// 它出现在"表达式上下文（expression context）"中。
			// 左花括号 在这里表示一个表达式的开始。
			//=====================表达式上下文
					JavaScript 中的"表达式上下文（expression context）"
					指的是能够返回一个值（表达式）。
					// 左花括号 在这里表示一个表达式的开始。
			//=====================语句上下文
					语句上下文
					同样的花括号，
					如果出现在一个"语句上下文（statement context）"中，
					例如跟在 if 语句条件的后面，则表示一个语句块的开始。

2). "对象字面量"的"值"可以是"任何数据类型"
			包括数组字面量，函数，嵌套的对象字面量
			var Swapper = {
				// 数组字面量（用逗号分隔，所有都要加引号）
				images: ["smile.gif", "grim.gif", "frown.gif", "bomb.gif"],
				pos: { //嵌套对象字面量
					x: 40,
					y: 300
				},
				onSwap: function() { //函数
				}
			};
3).
	如果有任何的语法规则被打破，
	如 "缺少逗号或冒号或大括号"，
	将会触发JavaScript错误。

	//浏览器的错误信息在指出对象字面量语法错误的位置一般有帮助，
	//但他们不一定会准确指出错误。

4).
	在使用对象字面量时，属性名也可以用字符串
			var person={
				"name":"Jack",
				"age":29,
				5:true
			};
	"数值属性"名会自动转换为字符串

5). 
	"字面量创建对象"强调该"对象仅是一个可变的hash映射"，
	而不是"从对象中提取的属性或方法"。
		//那么是不是说，其它创建对象的方法是不是为了"从对象中提取属性和方法"？？？
	//=======================================创建对象的两种方法：	
			使用字面量方法创建对象：
						var student = {name: "张三"};
			使用内置构造函数创建对象：
						var student = new Object(); student.name = "张三"。
	//=======================================
	应该尽量使用"字面量方法"创建对象，其显著优点在于它只需要输入更少的字符
6). 
	与使用Object构造函数相比，
	使用字面量好处在于它并没有作用域解析。
		
7). 对象字面量也是向函数传递大量可选参数的首选方式
	



