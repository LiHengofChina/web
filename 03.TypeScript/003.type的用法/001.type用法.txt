


interface 和 type 在 TypeScript 中都可以用来定义对象结构，
但它们有一些区别和各自适合的场景。

//=============================================== 相同点
//=============================================== 相同点
interface A {
  name: string;
}

type B = {
  name: string;
}

这两个写法定义的结构是一样的，都可以用于定义对象的类型。



能否重复定义			✅ 可以（自动合并）		❌ 不可以
是否支持联合/交叉类型	❌ 不支持联合、交叉		✅ 支持 `type A = B




//=============================================== 实战建议
//=============================================== 实战建议

✅ 用 interface 来定义 props、数据模型等面向对象的结构（更语义化、支持继承）

✅ 用 type 来定义函数签名、联合类型、工具类型、复杂类型组合等



//=============================================== 总结一句话：
//=============================================== 总结一句话：

interface 更适合定义结构化数据（像“模板”），
type 更灵活，能表达复杂类型组合。

