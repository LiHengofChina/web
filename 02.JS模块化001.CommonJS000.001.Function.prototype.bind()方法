	Function.prototype.bind()方法
	bind() 方法的主要作用就是将函数绑定至某个对象，
	bind() 方法会创建一个函数，
	//====================================示例说明
	abc.bind(obj)  
			1). 把 abc 函数绑定到 obj 对象，返回 一个新函数，
			2). abc是一个函数，当 abc() 调用; 相当于obj.abc();
						//既然 相当于 obj.abc() ，那么acb()内部的 this 便指向了 obj

 
//==================================== 一阶示例：(原始用法 )
//==================================== 一阶示例：(原始用法 )
var o={ 
    f: function () {
        var self=this; //this指 f()被调用的时候的那个调用者，也就是 o 对象
        var fff=function() {
			//此时 this 指向的是全局作用域 global/window，
			//因此需要在这个函数的上面一行"使用 self 指向对象"o
            console.log(self.value);  
        };
        fff();//调用一次
    },
    value: "Hello World!"
};
o.f(); // Hello World
 使用保存 this 上下文的方法，
 把 this 赋值给了中间变量 self，
 这样在内部嵌套的函数中能够使用 self 访问到对象o

 
//==================================== 二阶示例：(使用bind方法)
//==================================== 二阶示例：(使用bind方法)
var o={ 
    f: function () {
        var fff=function() {
            console.log(this.value);  
        }.bind(this); //this指 f()被调用的时候的那个调用者，也就是 o 对象
					  //把 fff()绑定到了o对象，
        fff();   // 调用 fff() 相当于 o.fff()
				 
    },	
    value: "Hello World!"
};
o.f(); // Hello World


//==================================== 三阶示例：带参函数的绑定
//==================================== 三阶示例：带参函数的绑定

function f( y , z ){
    return this.x + y + z;
}
var m = f.bind( { x :1 } , 2 ); 		// {x:1} 表示一个对象有x属性
										// 新函数被重命名，m 为新函数名字

console.log(m(3));  // 6


	//=========================
		第一个实参绑定给f函数体内的 this，
		从第二个实参起，将依此传递给原始函数，
		//=============因此： f.bind( { x :1 } , 2 )
		//绑定阶段
	    { x : 1 } 传递给     this
		2         传递给	 形参y 
		//调用阶段，第二形参未绑，因此调用时只需要传入它。
		m(3) 调用时的3 传递给形参z。
 

