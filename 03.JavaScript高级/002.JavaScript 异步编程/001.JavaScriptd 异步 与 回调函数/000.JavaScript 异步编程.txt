

https://www.runoob.com/js/js-async.html


//================================================= 什么时候用异步编程
//================================================= 什么时候用异步编程

	在前端编程中"（甚至后端有时也是这样）"


	我们在处理一些简短、快速的操作时，
			//例如计算 1 + 1 的结果
	往往在主线程中就可以完成。主线程作为一个线程，不能够 "同时接受多方面的请求"。

	所以，当"一个事件"没有结束时，界面将"无法处理其他请求"。

	现在有一个按钮，如果我们设置它的 onclick 事件为一个死循环，

//================================================= 异步使用场景
//================================================= 异步使用场景

	为了避免这种情况的发生，
	我们常常用 "子线程" 来完成一些"可能消耗时间足够长"以至于"被用户察觉的事情"，
	比 "读取一个大文件"或者"发出一个网络请求" 。
	因为子线程"独立于主线程"，所以即使出现阻塞也不会影响主线程的运行。
		
//================================================= 异步函数的局限
//================================================= 异步函数的局限

 
	但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，	
	我们无法确定它的结束，如果结束之后需要处理一些事情，
	
	比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。
	为了解决这个问题，
	JavaScript 中的 "异步操作函数" 往往通过 "回调函数" 来实现异步任务的结果处理。


