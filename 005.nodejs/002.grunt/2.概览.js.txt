//======================================Gruntfile组成部分	
	1)."wrapper" 函数
	2).项目与任务配置
	3).加载grunt插件和任务
	4).自定义任务
	//===================官方给出的示例:
	//===================官方给出的示例:
	//===================官方给出的示例:
		 module.exports = function(grunt) {

		  // Project configuration.
		  grunt.initConfig({
			pkg: grunt.file.readJSON('package.json'),
			uglify: {
			  options: {
				banner: '/*liheng*/\n'
			  },
			  build: {
				src: 'Gruntfile.js',
				dest: 'Gruntfile.min.js'
			  }
			}
		  });

		  // 加载包含 "uglify" 任务的插件。
		  grunt.loadNpmTasks('grunt-contrib-uglify');

		  // 默认被执行的任务列表。
		  grunt.registerTask('default', ['uglify']);

		};
	//==================="wrapper" 函数
	//==================="wrapper" 函数
	//==================="wrapper" 函数
		//每一份 Gruntfile （和grunt插件）都遵循同样的格式，
		//你所书写的Grunt代码必须放在此函数内：
		module.exports = function(grunt) {
			// Do grunt-related things in here
		};
		
	//===================项目和任务配置
	//===================项目和任务配置
	//===================项目和任务配置
		大部分的Grunt任务都依赖某些配置数据，
		这些数据被定义在一个object内
		并传递给grunt.initConfig 方法。
		如：
			grunt.initConfig({ 
				//这是一个对象
			});
 	
		//==============================示例1：
			1).grunt.file.readJSON('package.json') 
			   将存储在package.json文件中的JSON元数据
			   引入到grunt config中。
 
			2).你可以在这个配置对象中(传递给initConfig()方法的对象)
			   存储任意的数据
			   只要它不与你任务配置所需的属性冲突，
			   否则会被忽略。
			    
			3).示例解读：
				uglify: {
						options: {
								banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
						},
						build: {
								src: 'src/<%= pkg.name %>.js',
								dest: 'build/<%= pkg.name %>.min.js'
						}
				}			
				解读：
					1).指定了一个banner选项(用于在文件顶部生成一个注释)
					2).紧接着是一个单一的名为build的uglify目标
						用于将一个js文件压缩为一个目标文件。

	//===================加载 Grunt 插件和任务				
	//===================加载 Grunt 插件和任务				
	//===================加载 Grunt 插件和任务				
				像 concatenation、[minification]、grunt-contrib-uglify 和
				linting这些常用的任务（task）
				都已经以grunt插件的形式被开发出来了。
				
				只要在 package.json 文件中被列为dependency（依赖）的包，
				并通过npm install安装之后，
				都可以在Gruntfile中以简单命令的形式使用：	
				
				grunt.loadNpmTasks('grunt-contrib-uglify');	
				
	//===================自定义任务
	//===================自定义任务
	//===================自定义任务
			1).默认任务
				通过定义 default 任务，可以让Grunt默认执行一个或多个任务		
				
				示例：
					grunt.registerTask('default', ['uglify']);
					执行 grunt 命令时如果不指定一个任务的话，
					将会执行uglify任务。	
					//这和执行grunt uglify 或者 grunt default的效果一样
					
					default任务列表数组中可以指定任意数目的任务（可以带参数）。
			
			2).
				如果Grunt插件中的任务（task）不能满足你的项目需求，
				你还可以在Gruntfile中自定义任务（task）
				
				例如，在下面的 Gruntfile 中自定义了一个default 任务			
				并且他甚至不依赖任务配置：
			
				示例：
				module.exports = function(grunt) {
					// A very basic default task.
					grunt.registerTask('default', 'Log some stuff.', function() {
						grunt.log.write('Logging some stuff...').ok();
					});
				};
			3).
				特定于项目的任务不必在 Gruntfile 中定义。
				他们可以定义在外部.js 文件中，
				并通过grunt.loadTasks 方法加载。
			
			
			
			
			
			
			
			
			
			
	
	