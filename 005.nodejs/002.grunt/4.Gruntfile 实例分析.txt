	module.exports = function(grunt) {
		  grunt.initConfig({
			jshint: {
			  files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],
			  options: {
				globals: {
				  jQuery: true
				}
			  }
			},
			watch: {
			  files: ['<%= jshint.files %>'],
			  tasks: ['jshint']
			}
		  });
		  grunt.loadNpmTasks('grunt-contrib-jshint');
		  grunt.loadNpmTasks('grunt-contrib-watch');
		  grunt.registerTask('default', ['jshint']);
	};


//===============
本案例会用到以下5个GRUNT插件

grunt-contrib-uglify
grunt-contrib-qunit
grunt-contrib-concat
grunt-contrib-jshint
grunt-contrib-watch
//============分析：
//=================================(1)
	一部分是"wrapper" 函数，它包含了整个Grunt配置信息。
	module.exports = function(grunt) {
	}
//=================================(2)	
	在这个函数中，我们可以初始化 configuration 对象：
	grunt.initConfig({
	});
//=================================(3)	
	接下来可以从 package.json 文件读入项目配置信息，
	并存入 pkg 属性内。
	这样就可以让我们访问到package.json文件中
	列出的属性了，如下：
	pkg: grunt.file.readJSON('package.json')
//=================================(4)	
	现在就可以为我们的"每个任务"来定义相应的配置
	然后"每个任务"的配置对象作为"Grunt配置对象"的属性
	并且这个"属性名称"与"任务名相同"
	 
	//====如，以"concat"任务为例，它的作用是连接
			concat: {
				  options: {
					// 定义一个用于插入合并输出文件之间的字符
					separator: ';'
				  },
				  dist: {
					// 将要被合并的文件
					src: ['src/**/*.js'],
					// 合并后的JS文件的存放位置
					dest: 'dist/<%= pkg.name %>.js'
				  }
			}	
	//====uglify插件，它的作用是压缩（minify）JavaScript文件： 

			uglify: {
				  options: {
					// 此处定义的banner注释将插入到输出文件的顶部
					banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
				  },
				  dist: {
					files: {
					  'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']
					}
				  }
			}
	//====QUnit插件	它的作用是单元测试
				QUnit插件的设置非常简单。 
				你只需要给它提供用于测试运行的文件的位置，
				注意这里的QUnit是运行在HTML文件上的。
			qunit: {
			  files: ['test/**/*.html']
			}	
	//====JSHint插件 作用检测语法规则
	
			(1).JSHint只需要一个文件数组
					//(也就是你需要检测的文件数组)， 
			(2).然后是一个options对象
					//这个对象用于重写JSHint提供的默认检测规则
					//如果你乐于使用JSHint提供的默认配置，
					//那么在Gruntfile中就不需要重新定义它们了.
			
			jshint: {
				  // define the files to lint
				  files: [ 'src/**/*.js', 'test/**/*.js'],
				  // configure JSHint (documented at http://www.jshint.com/docs/)
				  options: {
						// more options here if you want to override JSHint defaults
						globals: {
							  jQuery: true,
							  console: true,
							  module: true
						}
				  }
			}
	//====watch插件	，作用是监控文件变化
			当它"检测到"任何你所"指定的文件"发生变化时
			它就会按照你所"指定的顺序"执行"指定的任务"
			
			watch: {
				files: ['<%= jshint.files %>'],
				tasks: ['jshint', 'qunit']
			}
//=================================(5)	
		//引入插件
		grunt.loadNpmTasks('grunt-contrib-uglify');
		grunt.loadNpmTasks('grunt-contrib-jshint');
		grunt.loadNpmTasks('grunt-contrib-qunit');
		grunt.loadNpmTasks('grunt-contrib-watch');
		grunt.loadNpmTasks('grunt-contrib-concat');
//=================================(5)
		最后设置了一些task。最重要的是default任务：
				
		// 在命令行上输入"grunt test"，test task就会被执行。
		grunt.registerTask('test', ['jshint', 'qunit']);

		// 只需在命令行上输入"grunt"，就会执行default task
		grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);			
				
			
			
			
			