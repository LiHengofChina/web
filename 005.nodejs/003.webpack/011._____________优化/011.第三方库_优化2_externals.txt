



//==============================================================
//==============================================================
可以使用打包工具的 externals 选项来优化第三方代码的打包过程。
这种做法的核心思想是将第三方库标记为外部依赖，不将它们打包到最终的输出文件中，
而是从外部（例如CDN或本地静态资源）加载它们。
这有助于减少打包后的文件大小，并提高资源加载的灵活性和效率。

//============================================================== 如何使用 externals
//============================================================== 如何使用 externals
以 Webpack 为例，你可以在 Webpack 的配置文件中配置 externals，
指定哪些依赖项不需要打包，
而是从外部获取。例如：

// webpack.config.js
module.exports = {
  // ...其他配置
  externals: {
    'vue': 'Vue',
    'axios': 'axios'
  }
};

在这个配置中，vue 和 axios 被指定为外部依赖。
这意味着在打包时，Webpack 不会将这两个库的代码打包到输出文件中，
而是假设它们在运行时已经存在于外部环境中。

//============================================================== 如何加载外部依赖
//============================================================== 如何加载外部依赖

当使用 externals 时，你需要确保这些外部依赖在应用程序运行时可用。
通常有两种方式来提供这些外部依赖：

（1）使用 CDN:
	你可以通过在 HTML 文件中使用 <script> 标签从CDN加载外部库。例如：
	<script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js"></script>
	这样，在运行时，Vue 和 Axios 就会从CDN加载，而不是从打包文件中加载。


（2）本地静态资源:
	也可以将这些外部库作为静态资源保存在项目中，并在HTML文件中引用它们。
	<script src="/static/vue.min.js"></script>
	<script src="/static/axios.min.js"></script>

//============================================================== 优点
//============================================================== 优点
减小打包文件大小: 通过不打包第三方库，可以显著减小打包文件的体积，减少加载时间。
缓存效率: 使用CDN时，浏览器可能已经缓存了这些常用的第三方库，从而进一步提高加载速度。
独立更新: 第三方库可以独立于应用程序进行更新，无需重新打包和部署整个应用。

//============================================================== 注意事项
//============================================================== 注意事项
版本匹配: 确保外部加载的库版本与项目中的依赖版本一致，以避免因版本不一致导致的兼容性问题。
运行环境: 必须确保外部库在应用运行之前加载，否则可能导致运行时错误。

//============================================================== 其它
//============================================================== 其它
另外一些系统配置，我也是可以放在static中的

将一些需要手动修改的系统配置文件放在 static 目录中。
static 目录通常用于存放不需要由 Webpack 等构建工具处理的静态资源，
这些资源会在构建时直接复制到最终的输出目录中，并且可以在应用中直接访问。

