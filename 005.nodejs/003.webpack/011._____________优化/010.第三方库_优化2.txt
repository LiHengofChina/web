

当你在 Vue.js 项目中引入第三方的 JavaScript 文件（无论是通过 "npm 包" 还是 "直接引用的外部库" ），
"这些文件" 都会和 "你自己编写的 JavaScript 代码" 一起打包到 "最终的输出文件" 中。


//============================================================== 所有的代码来源，包括以下几种情况：
//============================================================== 所有的代码来源，包括以下几种情况：

（1）Vue 框架本身的代码:
	如果你使用 Vue 框架，那么  "Vue 的核心代码" 也会被打包到 "最终的输出文件" 中。
	这包括 Vue 的核心库、组件系统、指令等功能。

（2）第三方库:
	（1）通过 npm 安装并在项目中使用的第三方库，
	     如 axios、vue-router、vuex 等，"这些库的代码" 会被打包到最终的输出文件中。

	（2）如果你通过  "<script> 标签" 直接在 HTML 文件中引入外部的 "第三方库（如CDN方式）"，
	     这些库 "不会" 被打包工具 "打包"，但是需要确保在生产环境中正确引用这些资源。

	（3）开发者编写的代码:
		 所有你自己编写的 Vue 组件、JavaScript 逻辑、样式文件等，
		 也会被打包工具处理并包括在最终的输出文件中。
//============================================================== 打包过程
//============================================================== 打包过程
打包工具（如 Webpack 或 Vite）会执行以下操作：
（1）解析依赖: 扫描和解析所有的 import 或 require 语句，
	 构建一个模块依赖图。

（2）合并和优化: 将所有依赖的模块代码合并到一起，并进行优化，
     如去除未使用的代码（tree-shaking）、代码压缩、代码拆分（code-splitting）等。

（3）输出打包文件: 生成一个或多个最终的打包文件（通常是 .js 文件），
	 这些文件包含了项目运行所需的所有代码。

//============================================================== 结果
//============================================================== 结果

最终生成的打包文件中会包括：
	（1）Vue 框架的核心代码。
	（2）使用的第三方库的代码。
	（3）开发者编写的应用代码。

这些代码被打包在一起，使得在 "生产环境" 中可以直接通过 "引入这些文件" 来运行 "整个应用"。
这种 "集中化打包的方式" 简化了 "资源的管理和部署"，
同时也可以通过 "打包工具的优化功能" 来减少 "文件大小和提高加载性能"。

//============================================================== 特别注意
//============================================================== 特别注意
（1）按需引入: 为了减小打包体积，尽量使用按需引入的方式来减少不必要的代码。
		例如，可以使用 lodash 的按需引入来避免引入整个库。
（2）代码拆分: 对于较大的项目，可以使用代码拆分技术，将代码分成多个更小的包，
		按需加载，以提升页面加载性能。



