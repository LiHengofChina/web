
//==============================================================================================
//==============================================================================================
（1）使用 webpack-bundle-analyzer 插件来分析打包后的文件大小，找出最大的模块并进行优化。


	const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

	module.exports = {
	  // 其他配置
	  plugins: [
		new BundleAnalyzerPlugin(),
	  ],
	};


使用 Webpack 插件如 webpack-bundle-analyzer 来分析打包后的文件，找出并移除未使用的代码和依赖。

//==============================================================================================
//==============================================================================================

（2）webpack-bundle-analyzer  编译后会启动一个服务对吗，
	 通过 http://127.0.0.1:8888/ 可以访问，我不想让它启动，怎么关闭

	 http://127.0.0.1:8888/ 是 Webpack Bundle Analyzer 的默认地址。
	 Webpack Bundle Analyzer 是一个 Webpack 插件，用于可视化和分析你的打包文件。
	 它会生成一个交互式的树状图，

	 显示你的项目中每个模块的大小和依赖关系，
	 这有助于你识别和优化打包过程中存在的问题。

	在这个页面上，你可以看到：

	（1）每个模块在你的打包文件中占用的空间大小。
	（2）模块之间的依赖关系。
	（3）是否有重复的模块或依赖项。
	（4）其他有助于优化打包大小和性能的信息。
	（5）通过使用 Webpack Bundle Analyzer，你可以更好地理解你的打包文件结构，
		 从而进行优化以减少文件大小，提高加载速度和性能。

	你只需要在浏览器中访问 http://127.0.0.1:8888/，就可以查看这些信息并进行相应的调整。

//==============================================================================================
//==============================================================================================

BundleAnalyzerPlugin 这个插件只是协助分析，删除不需要的js需要程序员自己去做，


//========================================================================================= 根据环境来添加
//========================================================================================= 根据环境来添加

// webpack.prod.conf.js 或 webpack.config.js
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

const config = {
  // 其他配置
  plugins: [
    // 其他插件
  ],
};

// 检查环境变量，决定是否添加 BundleAnalyzerPlugin
if (process.env.ANALYZE) {
  config.plugins.push(new BundleAnalyzerPlugin());
}

module.exports = config;


