resolve
	Webpack 在启动后会从"配置的入口模块"出发找出"所有依赖的模块"
	
	Resolve 配置 Webpack 如何寻找模块所对应的文件。
	
	//Webpack 内置 JavaScript 模块化语法解析功能，
	//默认会采用模块化标准里约定好的规则去寻找，
	//但你也可以根据自己的需要修改默认的规则。
	
//========================= modules
//========================= modules
 resolve.modules  指定 Webpack 去哪些目录下寻找第三方模块
		
		1). //默认是只会去  node_modules  目录下寻找。
		
		2). 假如那些被大量导入的模块都在  ./src/components  目录下，
			把  modules  配置成，
			
			modules:['./src/components','node_modules']		
		
		
 

//========================= extensions
//========================= extensions
	导入语句没带文件后缀时，
	Webpack 会自动带上后缀后去尝试访问文件是否存在。
	resolve.extensions 用于配置在尝试过程中用到的后缀列表，
	
	extensions: ['.js', '.json']
	
	//============示例：
	也就是说当遇到  require('./data')  这样的导入语句时，
	Webpack 会先去寻找  
	./data.js  文件，如果该文件不存在就去寻找  
	./data.json  文件， 如果还是找不到就报错。


//========================= alias
//========================= alias
		过别名来把"原导入路径"映射成一个"新的导入路径"
	示例：一).
		// Webpack alias 配置
		resolve:{
		  alias:{
			components: './src/components/'
		  }
		}
		//==========
		当你通过  
				import Button from 'components/button 导入时，
		实际上被 alias 等价替换成了  
				import Button from './src/components/button' 。

	示例：二). 缩小范围
		resolve:{
		  alias:{
			'react$': '/path/to/react.min.js'	//react$  只会命中以  react  结尾的导入语句
		  }
		}
		把  
			import 'react'  	
		关键字替换成  
			import '/path/to/react.min.js' 。

	
//========================= mainFields
//========================= mainFields
	
	不同环境提供几分代码时，指定优先指定的代码：
		// mainFields: ['jsnext:main', 'browser', 'main']
		// 
	
	
//========================= descriptionFiles	
//========================= descriptionFiles	
	//descriptionFiles: ['package.json']

