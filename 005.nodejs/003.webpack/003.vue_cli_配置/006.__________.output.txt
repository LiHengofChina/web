

在 Webpack 或 Vue CLI 项目中，
可以通过配置 output.filename 和 output.chunkFilename 来控制输出文件的命名格式。
通常，为了便于管理和调试，可以指定更有意义的文件名。

module.exports = defineConfig({
  // 其他配置...

  configureWebpack: {
    output: {
      filename: 'js/[name].[contenthash].js', // 用于入口文件
      chunkFilename: 'js/[name].[contenthash].js' // 用于分块文件
    },
[name] 是一个占位符，在 Webpack 的配置中会被模块的原始名称替代。
它通常代表模块的入口文件名或代码分块（chunk）的名称。





//=================================================
//=================================================
配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。

//=================================================

即使可以存在多个入口起点，
但只指定一个输出配置。


//===================================================================================== 一.用法
//===================================================================================== 一.用法

webpack.config.js:
const config = {
  output: {
    filename: 'bundle.js',
    path: '/home/proj/public/assets'
  }
};
module.exports = config;
//此配置将一个单独的 bundle.js 文件输出到 /home/proj/public/assets 目录中。


//===================================================================================== 二.多个入口起点
//===================================================================================== 二.多个入口起点

如果配置创建了多个单独的 "chunk"（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），
则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。



webpack.config.js:
const config = {
	entry: { //多个入口
		app: './src/app.js',
		search: './src/search.js'
	},
	output: { //多个出口文件
		filename: '[name].js',
		path: __dirname + '/dist'
	}
};
module.exports = config;


//===================================================================================== 三.高级进阶
//===================================================================================== 三.高级进阶

以下是使用 CDN 和资源 hash 的复杂示例：

config.js:
 
output: {
  path: "/home/proj/cdn/assets/[hash]",
  publicPath: "http://cdn.example.com/assets/[hash]/"
}

在编译时不知道最终输出文件的 publicPath 的情况下，publicPath 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 __webpack_public_path__。

__webpack_public_path__ = myRuntimePublicPath

// 剩余的应用程序入口

//===================================================================================== 四.output属性“path” Vs “publicPath”
//===================================================================================== 四.output属性“path” Vs “publicPath”

 output告诉Webpack应该在哪里以怎样的方式去放置打包好的文件。
		//它有两个属性：“path”和“publicPath”。
	  
	  //=====================
	  “path”会简单地告诉Webpack生成文件输出位置。
	  
	  “publicPath”多被一些Webpack的插件使用，
	  在HTML文件以生产环境方式被构建的时候，更新CSS文件内的URL地址。
	  
	  
//===================================================================================== 其它 
//===================================================================================== 其它 

	  output:{
					library: `${name}-[name]`,	 				// 输出一个库，为你的入口做导出。
					libraryTarget: "umd",						//配置如何暴露 library。可以使用下面的选项中的任意一个。
					chunkLoadingGlobal: `webpackJsonp_${name}`	/// webpack 用于加载 chunk 的全局变量。
			}