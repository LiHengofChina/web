
//=============================================================== 
//=============================================================== 
devServer: {
	proxy: 'http://localhost:8080'

}
proxy: 'http://127.0.0.1:8080' 是 Vue CLI 开发服务器（devServer）的代理配置。

它的作用是将前端的 API 请求转发到指定的后端服务器。
这里的配置表示：


当前端发送请求到 127.0.0.1:8080 时，开发服务器将这些请求代理到 http://127.0.0.1:8080。
127.0.0.1 是本地主机的 IP 地址，通常指向当前运行的计算机。8080 是服务器监听的端口号。
//=============================================================== 
//=============================================================== 

这种配置在 "前后端开发分离的项目" 中很常见，
主要目的是解决 "开发环境" 中 "前端和后端" 在 "不同主机" 或 "端口下运行时" 的 "跨域问题"。


//=============================================================== 例如：
//=============================================================== 例如：

如果你的前端应用运行在 localhost:8081，
而后端服务运行在 localhost:8080， 

（1）没有代理配置的话，前端直接请求后端时会遇到跨域问题。
（2）通过在前端开发服务器中配置代理，前端应用可以通过代理来请求后端资源，从而避免跨域问题。

//===================== 示例
//===================== 示例

假设有一个 API 请求是 /api/data，当前端访问 localhost:8081/api/data 时，
代理会将请求转发到 http://127.0.0.1:8080/api/data，后端在 127.0.0.1:8080 上运行。
这样，前端开发者可以通过代理透明地访问后端 API，而不需要担心跨域问题。


//=============================================================== 配置的格式 
//=============================================================== 配置的格式 

{
  "proxy": {
    "/api": {
      "target": "http://api.example.com",
      "changeOrigin": true,
      "pathRewrite": {
        "^/api": ""
      }
    }
  }
}
"/api": 	//表示所有以 /api 开头的请求路径都会被代理。
"target": "http://api.example.com": 目标服务器地址，所有被代理的请求将发送到这里。
"changeOrigin": true: 更改请求头的源，通常用于解决跨域问题。
"pathRewrite": { "^/api": "" }: 这个选项用于重写请求路径。上面的配置会把 /api 去掉，例如 /api/users 会被重写为 /users。

