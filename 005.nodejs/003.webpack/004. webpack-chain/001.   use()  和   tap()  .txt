
//==================================================================== .use()
//==================================================================== .use()
.use() 不是原生 ES6，也不是 Webpack 核心 API，
而是 webpack-chain（链式配置库）提供的方法，用来给指定的插件节点传入构造参数。

.use() 的第一个参数是要使用的插件构造函数（如 webpack.DefinePlugin），
第二个参数是一个数组，数组里的就是传给该插件构造函数的参数。



config.plugin('define').use(...) 只在第一次注册 DefinePlugin 的时候用——
它会新建一个名叫 define 的插件实例并把你给它的参数当作配置；

//==================================================================== .tap()
//==================================================================== .tap()
之后如果还想往同一个 define 插件里追加新的常量，
就必须改用 .tap()，因为 .use() 会重复注册新实例，
而 .tap() 则是拿到已有实例的参数把它们合并：


//====================================================================
//====================================================================

// 第一次：用 .use() 注册 DefinePlugin 并传入初始常量
config
  .plugin('define')
  .use(webpack.DefinePlugin, [{
    'process.env.APP_MODE': JSON.stringify(process.env.APP_MODE),
  }]);


//====================================================================
//====================================================================
// 第二次：用 .tap() 拿到上面那一组定义，再追加 __FEATURE_TOGGLE__
    config
    .plugin('define')
    .tap(
      ([definitions]: any[]) => {
    
        return [{
          ...definitions,
          __FEATURE_TOGGLE__: JSON.stringify(toggles),
        }];
      }
    );
 