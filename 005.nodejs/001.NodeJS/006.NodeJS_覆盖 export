//============================示例1：exports
//============================示例1：exports
//==========//singleobject.js
function Hello() {
	var name;
	this.setName = function(thyName) {
		name = thyName;
	};
	this.sayHello = function() {
		console.log('Hello ' + name);
	};
};
exports.Hello = Hello; ///////////////////

//==========//gethello.js

var Hello = require('./singleobject').Hello ///////////////////
hello = new Hello();
hello.setName('BYVoid');
hello.sayHello();

hello2 = new Hello();
hello2.setName('BYVoid2');
hello2.sayHello();

//============================示例2：module.exports
//============================示例2：module.exports
function Hello() {
	var name;
	this.setName = function(thyName) {
		name = thyName;
	};
	this.sayHello = function() {
		console.log('Hello ' + name);
	};
};
module.exports = Hello; ///////////////////

//==========//
//gethello.js
var Hello = require('./singleobject');
hello = new Hello();
hello.setName('BYVoid');
hello.sayHello();

hello2 = new Hello();
hello2.setName('BYVoid2');
hello2.sayHello();

//============================说明：
//============================说明：
			使用 module.exports = Hello 代替了 exports.Hello = Hello。
			在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的exports 。
				//exports 是指向的 module.exports 的引用
				//module.exports 初始值为一个空对象 {}
				//require() 返回的是 module.exports 而不是 exports	//返回的是 module.exports

事实上， exports 本身仅仅是一个普通的空对象，即 {} ，它专门用来声明接口，
本质上是通过它为模块闭包的内部建立了一个有限的访问接口。

因为它没有任何特殊的地方，//解释： {} 和一个空对象，没有特殊的东西
所以可以用其他东西来代替，譬如我们上面例子中的 Hello 对象。

注意，不可以通过对 exports 直接赋值代替对 module.exports 赋值。
		//解释：意思是说 exportes = LIHENG  不等于 module.exports = LIHENG;
		
exports 实际上只是一个和 module.exports 指向同一个对象的变量，
它本身会在模块执行结束后释放，	//解释：exports 会释放 

但 module 不会，因此只能通过指定module.exports 来改变访问接口。

	
 
