
//======================================== 问题
//======================================== 问题

流水线（CI/CD）执行 yarn install 时：
流水线（CI/CD）执行 yarn install 时：

	优先使用 yarn.lock，严格按照里面锁的版本去下载依赖。
	package.json 里的版本范围（比如 ^3.1.2）只是个“声明”，
	真正安装时是 yarn.lock 决定最终装哪个版本。

	所以即使你在 package.json 里加了 "resolutions"，
	只要 yarn.lock 里还是 10.0.3，流水线就会继续装 10.0.3，
	然后报 Node 18 不兼容。
	rm -rf node_modules yarn.lock
	yarn install

这样 Yarn 会根据 package.json + resolutions 重新生成新的 yarn.lock，
锁到 9.0.3，流水线上跑时就不会再拉 10.0.3。

//======================================== 区别
//======================================== 区别

package.json
	描述项目需要哪些依赖，
	以及大致的版本范围（比如 "^3.1.2" 表示 ≥3.1.2 且 <4）。

	它是一个 需求说明书，
	告诉别人“我需要哪些库”。

	版本一般是"范围"，不保证大家装的完全一样。

yarn.lock
	是依赖的 精确快照，里面记录了 "所有库" 和 "子库" 的具体版本号（比如正好是 3.1.2）。
	它是一个 锁定清单，保证不同环境（你本地、同事、流水线）安装时用的版本完全一致。
	CI/CD 流水线会严格按照 yarn.lock 安装，而不是 package.json 的范围。


//========================================
//========================================
yarn.lock

yarn.lock 是在你执行 yarn install 的时候自动生成/更新的，
作用就是 把依赖树里所有包的实际版本号锁定下来。

//========================================
//========================================

执行 yarn install会生成这个文件的
