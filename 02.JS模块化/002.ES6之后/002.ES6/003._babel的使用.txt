现在的Chrome浏览器已经支持ES6了，但是有些低版本的浏览器还是不支持ES6的语法
	//这就需要我们把ES6的语法自动的转变成ES5的语法。
	//====================================
	webpack是有自动编译转换能力的 
	//=============
	除了Webpack自动编译
	我们还可以用Babel来完成
//================================================================================== 使用 Babel 做很简单的 NodeJs包
//================================================================================== 使用 Babel 做很简单的 NodeJs包
https://www.jianshu.com/p/b65176f3e935
 
		
（1）. 快速生成 package.json
		npm init -y

（2）. 安装 babel	//读：卑泊 bei bo
		//注意，并不是使用wekpack  
		npm install -g babel-cli
		npm install --save-dev babel-preset-es2015 babel-cli

（3）. 
		在根目录下 新建 .babelrc 
		{
			"presets":[
				"es2015"
			],
			"plugins":[]
		}

（4）.
	（1）. 新建 src 目录 
		   再新建 src/index.html 与 src/index.js 文件 
    （2）. 再新建 dist 目录 
		   再新建 dist/index.js 文件


（5）. 在src下的 index.js 中编辑 使用es6语法
	 let a=1;
	 console.log(a);

（6）. 然后我们在终端输入
	 babel src/index.js -o dist/index.js
	 这句代码意思就是 把src下的index.js 转译到dist下的index.js中 
	 此时我们查看dist下的index.js
	 
	 此时es5语法的js已经自动生成 控制台也能看到1的输出
	
	 //这样es6的语法就自己转换成es5了
	 //注意：这仅仅是转成了es5，并不是之前写的最原始的JS

（7）. 
	 每次的编译都需要转换输入命令有点烦，可以配置一下package.json
	 "scripts": {
		"test": "echo \"Error: no test specified\" && exit 1",
		"build": "babel src/index.js -o dist/index.js"
	  },
	
	修改好后，以后我们就可以使用 npm run build 来进行转换了。

