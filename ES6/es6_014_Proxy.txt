
//================================= 什么是钩子函数
//================================= 什么是钩子函数
	当我们在操作"一个对象或者方法"时会有几种动作，
		比如：
		 1).在运行函数前初始化一些数据，
		 2).在改变对象值后做一些善后处理。
		这些都算钩子函数

		//Proxy的存在就可以让我们给函数加上这样的钩子函数
		//也可以理解为在执行方法前预处理一些代码。
		//你可以简单的理解为他是函数或者对象的生命周期。
//=======================================	 Proxy的作用	
//=======================================	 Proxy的作用
		Proxy的应用可以使函数更加强大
		业务逻辑更加清楚，
		而且在编写自己的框架或者通用组件时非常好用。	

//======================================= 声明 Proxy 
//======================================= 声明 Proxy 
格式：
	new Proxy ({},{})
	说明：
		  //第一个花括号就相当于我们方法的主体
		  //后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。
		  
//======================================= 非代理
//======================================= 非代理
示例1：
    var obj={
        add:function(val){
            return val+10;
        },
        name:'javascript'
    };
    console.log(obj.add(100));
    console.log(obj.name);

//======================================= Proxy函数
//======================================= Proxy函数
示例1：Proxy get方法
	var pro = new Proxy ({
		add:function(val){
			return val+10;
		},
		name:'javascript'
	},{
		get:function(target,key,property){
			console.log('come in Get');
			return target[key];
		}
	});
	console.log(pro.name);

//======================================= Proxy 函数
//======================================= Proxy 函数
示例2: Proxy set 方法
  var pro = new Proxy({
        add: function (val) {
            return val + 10;
        },
        name: 'javascript'
    }, {
            get:function(target,key){
                console.log('come in Get');
                return target[key];
            },
            set:function(target,key,value,receiver){
                console.log(`    setting ${key} = ${value}`);
                return target[key] = value;
            }
        });
    console.log(pro.name);
    pro.name='前端';
    console.log(pro.name);





//======================================================可以被代理的属性 get属性
//======================================================可以被代理的属性 get属性
get属性是在你得到某对象属性值时预处理的方法，他接受三个参数

target：得到的目标值
key：目标的key值，相当于对象的属性
property：这个不太常用，用法还在研究中，还请大神指教留言
 
//======================================================可以被代理的属性 set属性
//======================================================可以被代理的属性 set属性
set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。

target:目标值。
key：目标的Key值。
value：要改变的值。
receiver：改变前的原始值。



