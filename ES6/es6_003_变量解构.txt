 
//==================================================== 数组解构赋值
//==================================================== 数组解构赋值
//==================================================== 数组解构赋值

//=================== 示例1：
	let [a,b,c]=[0,1,2];
			表示从数组中提取值，
			然后按照位置的对应关系对变量赋值。
			// 数组模式和赋值模式统一
			// 等号左边和等号右边的形式要统一，如果不统一解构将失败。
			// 如果等号两边形式不一样，很可能获得undefined或者直接报错。

//=================== 示例2：
	
let [a,[b,c],d]=[1,[2,3],4];

//=================== 示例3：默认值
let [foo = true] =[];
console.log(foo); //控制台打印出true

//=================== 示例4：默认值
let [foo = true] =[false];
console.log(foo); //控制台打印出false

//=================== 示例5：默认值
let [a,b="ES6"]=['2016']
console.log(a);//为赋给的值， 
console.log(b);//为默认值
console.log(a+b);// 2016ES6

//=================== 示例6： undefined和null的区别。
let [a,b="2016"]=['ES6',undefined];
console.log(a);   //赋值
console.log(b);   // undefined 相当于没有赋值，什么都没有，所以它还是默认值 
console.log(a+b); //控制台显示“ES62016”
	
//=================== 示例7： undefined和null的区别。
let [a,b="2016"]=['ES6',null];
console.log(a);   //赋值 ES6
console.log(b);   //null相当于有值，但值为null。
				  //所以b并没有取默认值，而是解构成了null。
console.log(a+b); //控制台显示“ES6null”

//==================================================== 对象的解构赋值
//==================================================== 对象的解构赋值
//==================================================== 对象的解构赋值
解构不仅可以用于数组，还可以用于对象。
		对象的解构与数组有一个重要的不同。
		数组的元素是按次序排列的，
		对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
//=================== 示例1：
let {foo,bar} = {foo:'ES6',bar:'2016'};
console.log( bar ); //2016
console.log( foo ); //ES6
console.log( foo + bar); //控制台打印出了“ES62016”

//=================== 示例2： ()小括号的使用
let foo;	//提前定义了变量
({foo} = {foo: "liheng"});//使用的使用 () 号
console.log(foo);


//==================================================== 字符串解构
//==================================================== 字符串解构
//==================================================== 字符串解构
字符串被转换成了一个类似数组的对象。
const [a,b,c,d,e,f]="STRING";
console.log(a);
console.log(b);
console.log(c);
console.log(d);
console.log(e);
console.log(f);


PS: 解构的代码被babel编译后相对复杂一点，但仔细看，还是是JS





