
//============================================================== 函数扩展
//============================================================== 函数扩展
//示例1：形参给默认值
	function add(a,b=1){
		return a+b;
	}
	console.log(add(1));//可以给默认值，然后调用的时候，只传一个参数

//============================================================== 抛出错误
//============================================================== 抛出错误
    function add(a,b=1){
        if(a == 0){
            throw new Error('This is error');
        }
        return a+b;
    }
    console.log(add(0));

//============================================================== 函数中的严谨模式
//============================================================== 函数中的严谨模式
我们在ES中就经常使用严谨模式来进行编程，但是必须写在代码最上边，
相当于全局使用。
在ES6中我们可以写在函数体中，相当于针对函数来使用。
//====示例1：函数中的严谨模式

function add(a,b=1){	//PS: 严谨模式下，这里不能使用默认值，是ES6的一个坑
    'use strict'	    //函数中的严谨模式
    if(a == 0){
        throw new Error('This is error');
    }
    return a+b;
}
console.log(add(1));

 
//============================================================== 获取方法"需要传入的参数个数"
//============================================================== 获取方法"需要传入的参数个数"
//在使用别人的框架时，不知道别人的函数需要传递几个参数，使用以下办法：
//示例：

function add(a,b){
    'use strict'
    if(a == 0){
        throw new Error('This is error');
    }
    return a+b;
}
console.log(add.length);



//============================================================== 箭头函数
//============================================================== 箭头函数

//原来写法：
	var abc = function (a,b)  {
		console.log("__abc");
	}
	abc() 

//1).箭头写法：
	var def = (a,b) => {
		console.log("__def");
	}
	def()

//2).箭头写法，如果函数体只有一行代码 可以简化， 去掉{}
	var def = (a,b) =>   console.log("__def");
	def()

//3).  箭头函数中不可加new，也就是说箭头函数不能当构造函数进行使用




//============================================================== 函数解构
//============================================================== 函数解构
我们在前后端分离时，
后端经常返回来JSON格式的数据，
前端的美好愿望是直接把这个JSON格式数据当作参数，
传递到函数内部进行处理。
ES6就为我们提供了这样的解构赋值。

//==============示例1：(json)对象的函数解构
let json = {
    a:'baidu',
    b:'guge'
}
function fun({a,b='guge'}){ //变量名与属性名相同就能取到值
    console.log(a,b);
}
fun(json);

//==============示例2：数组的函数解构
let arr = ['baidu','guge','sougou'];
function fun(a,b,c){
    console.log(a,b,c);
}
fun(...arr); //...arr 表示数组中的所有元素


 