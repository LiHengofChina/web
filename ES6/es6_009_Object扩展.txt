对象对于Javascript是非常重要的。
//在ES6中对象有了很多新特性
//=====================================对象赋值
//=====================================对象赋值
//=====================================对象赋值
示例1：ES6允许把声明的变量直接赋值给对象，
let name="js666";
let skill= 'web';
var obj= {name,skill};
console.log(obj);  //Object {name: "js666", skill: "web"}


//=====================================对象Key值构建
//=====================================对象Key值构建
//=====================================对象Key值构建
示例2：对象Key值构建
let key='skill';
var obj={
	[key]:'web'
}
console.log(obj.skill);
 
//===================================== 自定义对象方法
//===================================== 自定义对象方法
//===================================== 自定义对象方法
示例3：自定义对象方法
var obj={
	add:function(a,b){
		return a+b;
	}
}   
console.log(obj.add(1,2));  //3

//===================================== 对象值比较
//===================================== 对象值比较
//===================================== 对象值比较
示例4：
var obj1 = {name:'js'};
var obj2 = {name:'js'};
console.log(obj1.name === obj2.name);//true. 旧的比较方式
console.log(Object.is(obj1.name,obj2.name)); //true. 新的比较方式
说明 ：
	===		为同值相等
	is()	为严格相等

//===================================== 对象合并
//===================================== 对象合并
//===================================== 对象合并
示例5:
var a={a:'www'};
var b={b:'baidu'};
var c={c:'com'};
let d=Object.assign(a,b,c)
console.log(d);

//===================================== 声明一个Symbol
//===================================== 声明一个Symbol
//===================================== 声明一个Symbol
示例6： Symbol 声明
var g = Symbol('ES6');
console.log(g);
console.log(g.toString());

Symbol构建对象的Key，并调用和赋值。


//===================================== Symbol构建对象的Key，并调用和赋值。
//===================================== Symbol构建对象的Key，并调用和赋值。
//===================================== Symbol构建对象的Key，并调用和赋值。
var es = Symbol();
var obj={
    [es]:'666'
}
console.log(obj[es]);
obj[es]='web';
console.log(obj[es]);

//===================================== 未进行保护直接输出对象的所有值
//===================================== 未进行保护直接输出对象的所有值
//===================================== 未进行保护直接输出对象的所有值
var obj={name:'javascript',skill:'web',age:18};
for (let item in obj){
    console.log(obj[item]);
}
//===================================== 使用Symbol来进行循环保护
//===================================== 使用Symbol来进行循环保护
let obj={name:'javascript',skill:'web'};
let age=Symbol();
obj[age]=18;
for (let item in obj){
	console.log(obj[item]);
} 
//console.log(obj);// 当然这里是可以显示的 











