//============================ 
"扩展运算符"和"rest运算符"，
		它们都是…（三个点）。
作用:
	它们可以很好的为我们解决参数和对象数组未知情况下的编程，
	让我们的代码更健壮和简洁。
//==============================================================扩展运算符
//==============================================================扩展运算符
//==============================================================扩展运算符
//===================================示例1：用在方法形参，它用方便取参数
function es6(...arg){ 		// ...arg 作为形参表示传入的所有的参数
    console.log(arg[0]);	// arg[0] 所有参数中脚标为0的
    console.log(arg[1]);
    console.log(arg[2]);
    console.log(arg[3]);
}
es6(1,2,3);
//===================================示例2：用在方法入参
let arr = ['baidu','guge','sougou'];
function fun(a,b,c){
    console.log(a,b,c);
}
fun(...arr); //ps: ...arr 相当于取了数组里面的所有内容

//===================================示例3：引用对象改变的问题

let arr1=['www','baidu','com'];
let arr2=arr1;
console.log(arr2);
arr2.push('ES6');
console.log(arr1);
		//改变arr2的值，你会发现arr1的值也改变了，
		//因为我们这是对内存堆栈的引用，而不是真正的赋值。


//==========
let arr1=['www','baidu','com'];
let arr2=[...arr1];//使用扩展运算符号，解决了这个问题
console.log(arr2);
arr2.push('ES6');
console.log(arr2);
console.log(arr1);

//==============================================================rest运算符
//==============================================================rest运算符
//==============================================================rest运算符

"扩展运算符号与rest运算符号"它们有很多相似之处，它也用…（三个点）来表示
		//很多时候你不用特意去区分
		
//=================================== 示例1：获取参数长度
function es6(first,...arg){
    console.log(arg.length);
}
es6(0,1,2,3,4,5,6,7);

//=================================== 示例2：作为循环输出的引用
function es6(first,...arg){	
	for(let val of arg){	//for…of的循环可以避免我们开拓内存空间，增加代码运行效率
		console.log(val);
	}
}
es6(0,1,2,3,4,5,6,7);



