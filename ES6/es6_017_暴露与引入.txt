当项目功能越来越多，代码量便也会越来越多，后期的维护难度会增大，此时在JS方面就会考虑使用模块化规范去管理维护。


//=================================
// ES6通过export 以及export default 暴露模块 通过import 导入
export  或  export default 使用 import 引入 


//遵循COMMON.JS的规范 进行模块化开发
exports 或 module.exports 使用  require 引入


//================================= ES6 的暴露与引入方式
//================================= ES6 的暴露与引入方式
//================================= ES6 的暴露与引入方式
//ES6 通过 export 以及 export default 暴露模块 通过import 导入

export 或 export default 
	可以导出变量、函数、对象、文件、模块
		//一定要加大括号

//========================================================= 示例1：一般导出与导入
//========================================================= 示例1：一般导出与导入
//============ es6.js 导出
//============ es6.js 导出
function add() {
        console.log("hello") ;
}
var x = 9 
var obj={ a:1, b:2, c:3}
export { add, x, obj }

//另一种写法：
export var y = 9 
export function fn(){}

// 错误写法1 
//export 1; 
// 错误写法2  
//var m = 1; 
//export m; 

//============导入
//============导入

import {add,x,obj} from './es6.js' 	//按需导入需要什么导什么
//=========================================================	示例2: 导出到对象操作
//=========================================================	示例2: 导出到对象操作
//============导出到一个对象
//============导出到一个对象
var a={
	fn:function(){
		console.log(9)
	},
	a:9,
	obj:{  a:1, b:2, c:3 }
}
export {a}

//============ 导入对象，然后引用
//============ 导入对象，然后引用
import {a} from './es6.js'


//========================================================= 示例3: export default 一
//========================================================= 示例3: export default 一 
//export default 只能存在一个 //导入不需要加{ }
//export 可以存在多个 //导入一定要加{ }
//============ 导出
//============ 导出
var a={
	fn:function(){
		console.log(9)
	},　a:9, obj:{ a:1, b:2,  c:3 }
}
export default a  
//============ 导入
//============ 导入
import a from './es6.js'

//========================================================= 示例4: export default 二
//========================================================= 示例4: export default 二
//导出
var a=1;var b=2;var c=3;
export default a
export {b,c}  
//引入 
import  a,{b,c} from './es6.js'	//引入也不需要加 {}


//========================================================= as 引入 : 示例1
//========================================================= as 引入 : 示例1
//===========导出 
//===========导出
var a=1;var b=2;var c=3;
export {a,b,c}
//===========导入
//===========导入
import * as obj from './es6.js'  
	//注意此处没有{}  在全部数据都导入obj的时候 也就是使用通配符（*）的时候
	//将全部数据引入 obj 对象	
import {a as obj}  from './es6.js'
	//将 a 属性引入 obj
	
//========================================================= as 暴露: 示例1
//========================================================= as 暴露: 示例1
//===========导出 	
//===========导出 	
var a=1;var b=2;var c=3;
export {a as default} // 就是将a变成了默认暴露

//===========导入
//===========导入
import  aaaaa from './es6.js' 
	//一旦是默认暴露就可以自由命名
//========================================================= as 暴露: 示例2
//========================================================= as 暴露: 示例2
//===========导出
//===========导出
var a=1;var b=2;var c=3;
export {a as default,b,c}
//===========导入
//===========导入
import  aaaaa,{b,c} from './es6.js'

