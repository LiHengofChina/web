
const msg = await add(value);

等待 add(value) 这个异步操作完成，然后再执行下面的代码。

//====================================== 简单理解 await 的作用是：
//====================================== 简单理解 await 的作用是：

		让异步操作像同步一样写法；
		暂停执行当前函数，直到接口返回结果（或报错）为止；
		返回值就是接口响应的结果（如 msg）。

const res = await fetch('/api/data');
const data = await res.json();
console.log(data); // 这行等上面接口返回后才执行

//====================================== 有一段代码我想让它同步按顺序执行都可以使用这个 
//====================================== 有一段代码我想让它同步按顺序执行都可以使用这个 

你只要在 async 函数里，
就可以用 await 让多段异步代码按顺序同步执行，
每一步都等待前一步完成。

//============= 示例：
//============= 示例：

先调用接口 A 拿到 ID；
再用这个 ID 调用接口 B；
最后再调接口 C 记录日志。

const idRes = await getId(); // 接口A
const dataRes = await fetchData(idRes.id); // 接口B
await logAction(dataRes); // 接口C
message.success('全部完成');

只要你加了 await，它就会“停下来”等待，不会直接跳到下一行。
你可以理解为：像同步，但其实是异步。
是否还想了解 try/catch 搭配 await 的写法？

//====================================== await 必须在 async 函数里使用
//====================================== await 必须在 async 函数里使用

await 必须在 async 函数里使用，否则会报错。

