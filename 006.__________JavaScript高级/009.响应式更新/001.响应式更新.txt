
//======================================================== 响应式更新
//======================================================== 响应式更新
响应式更新这个词简单说就是：
	数据变了，界面会自动更新，你不用手动操作 DOM 来更新页面。


//====================== 举个简单例子：（1）没有响应式的传统写法（手动更新 DOM）：
//====================== 举个简单例子：（1）没有响应式的传统写法（手动更新 DOM）：


<p id="count">0</p>
<button onclick="add()">增加</button>

<script>
let count = 0
function add() {
  count++
  document.getElementById("count").innerText = count
}
</script>
你必须自己操作 DOM 来更新 <p> 的内容。

//====================== 举个简单例子：（2）有响应式的 Vue/React 写法：
//====================== 举个简单例子：（2）有响应式的 Vue/React 写法：

//===== Vue:
//===== Vue:
<template>
  <p>{{ count }}</p>
  <button @click="count++">增加</button>
</template>

<script setup>
import { ref } from 'vue'
const count = ref(0)
</script>



//===== React:
//===== React:
function Counter() {
  const [count, setCount] = useState(0)
  return (
    <>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>增加</button>
    </>
  )
}

你只修改数据变量，Vue 和 React 会自动检测并重新渲染相关部分的 DOM。

//======================================================== 响应式更新 = 自动感知 + 自动渲染
//======================================================== 响应式更新 = 自动感知 + 自动渲染

框架内部会“监听你的数据变化”，当你改数据时：
框架知道哪个组件依赖这个数据；
自动触发渲染；
更新对应的 DOM。


