//================================================= 模块的规范
//================================================= 模块的规范
http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html

//=====================================	
//=====================================
有了模块，我们就可以更方便地使用别人的代码，
想要什么功能，就加载什么模块。

//
但是，这样做有一个前提，那就是大家必须以同样的方式编写模块

//

Javascript模块现在还没有官方规范，
js社区，通行的Javascript模块规范共有两种：CommonJS和AMD。
我主要介绍AMD，但是要先从CommonJS讲起。
//================================================= 服务端环境 CommonJS - Node.js
//================================================= 服务端环境 CommonJS - Node.js
 

2009 年，美国程序员 Ryan Dahl 创造了 node.js 项目，将 "javascript语言" 用于服务器端编程。
这标志"Javascript模块化编程"正式诞生。

	
	//在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；
	
	//但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。

	node.js的模块系统，就是参照CommonJS规范实现的。
	//===========================
	在CommonJS中，有一个全局性方法require()
		/**
			假定有一个数学模块 math.js，就可以像下面这样加载。
			var math = require('math');
			math.add(2,3); // 5
		*/
	//===========================

//================================================= 浏览器环境 AMD
//================================================= 浏览器环境 AMD
	有了服务器端模块以后，很自然地，大家就想要客户端模块。
	而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。
	//================
	//================
	由于一个重大的局限，使得 CommonJS 规范不适用于浏览器环境。
	如果在浏览器中运行，会有一个很大的问题，
	/** 
		问题说明：
			
			var math = require('math');
		　　math.add(2, 3);	

		第二行math.add(2, 3)，在第一行require('math')之后运行，
		
		因此必须等math.js加载完成。
		也就是说，如果加载时间很长，整个应用就会停在那里等。

		这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，
		可以同步加载完成，等待时间就是硬盘的读取时间。
		
		但是，对于浏览器，这却是一个大问题，
		因为模块都放在服务器端，
		等待时间取决于网速的快慢，可能要等很长时间，
		浏览器处于"假死"状态。
		
		因此，浏览器端的模块，不能采用"同步加载"（synchronous），
		只能采用"异步加载"（asynchronous）。
		这就是AMD规范诞生的背景。
	*/

//========================== AMD 
//========================== AMD
	AMD是"Asynchronous Module Definition"的缩写，
	意思就是"异步模块定义"。它采用异步方式加载模块，
	模块的加载不影响它后面语句的运行。
	所有依赖这个模块的语句，都定义在一个回调函数中，
	等到加载完成之后，这个回调函数才会运行。
	//==================================
	//==================================
	AMD也采用require()语句加载模块，
	但是不同于CommonJS，它要求两个参数：
		require([module], callback);
	/**

　　require(['math'], function (math) {
　　　　math.add(2, 3);
　　});
	
	math.add()与math模块加载不是同步的，
	浏览器不会发生假死。
	
	目前，主要有两个Javascript库实现了AMD规范： require.js 和 curl.js 。
	
	*/	

//====================================== 总结
//====================================== 总结


	//同步 ，服务端
		CommonJS   ————————>  Node.js


	//异步 
		AMD   	   ————————>   require.js 和 curl.js 
		CMD    	   ————————>   seajs

 
