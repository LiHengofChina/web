//==========================================
//==========================================
	另外：
		由于 ES6 模块是编译时加载，使得静态分析成为可能。
		有了它，就能进一步拓宽 JavaScript 的语法，
		比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。
		
	除了静态加载带来的各种好处，ES6 模块还有以下好处。
			不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。
			目前，通过各种工具库，其实已经做到了这一点。
			将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。
			不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。

//========================================== 严格模式
//========================================== 严格模式
		
	ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";。严格模式主要有以下限制。

		变量必须声明后再使用
		函数的参数不能有同名属性，否则报错
		不能使用with语句
		不能对只读属性赋值，否则报错
		不能使用前缀 0 表示八进制数，否则报错
		不能删除不可删除的属性，否则报错
		不能删除变量delete prop，会报错，只能删除属性delete global[prop]
		eval不会在它的外层作用域引入变量
		eval和arguments不能被重新赋值
		arguments不会自动反映函数参数的变化
		不能使用arguments.callee
		不能使用arguments.caller
		禁止this指向全局对象
		不能使用fn.caller和fn.arguments获取函数调用的堆栈
		增加了保留字（比如protected、static和interface）

			
	上面这些限制，ES6模块都必须遵守。
	其中，尤其需要注意this的限制。
	ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。
		


 
