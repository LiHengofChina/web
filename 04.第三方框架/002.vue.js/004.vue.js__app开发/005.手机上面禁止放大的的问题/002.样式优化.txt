
//================================================================== 以下是两种常见的方法：
//================================================================== 以下是两种常见的方法：

（1）除了将CSS样式放在.vue文件的 <style> 标签内，
（2）你还可以将CSS文件放在assets文件夹或其他适当的目录中。

//=========== 以下是两种常见的方法：
//=========== 以下是两种常见的方法：

（1）在 .vue 文件的 <style> 部分:

将样式写在.vue文件的<style>标签中，这是最常见的方法。
这样做的好处是样式和组件的结构和行为紧密结合在一起，
更容易维护和管理。

（2）在 assets 文件夹中:
	如果你有一些全局的样式或者多个组件共享的样式，
	可以将这些CSS文件放在assets文件夹中。
	然后在你的Vue组件或全局入口文件（如main.js）中引入这些CSS文件。

	你可以通过以下几种方式引入assets中的CSS文件：
	//===================================
	（1）在全局引入（例如，在main.js中）：
	     import '@/assets/styles/global.css';
	     //这会使得全局样式在整个应用中生效。
	（2）在特定组件中引入：
		 如果你只想在特定组件中使用某些样式，可以在组件的<script>部分引入：
		<template>
		  <!-- 你的模板代码 -->
		</template>

		<script>
		import '@/assets/styles/special.css';

		export default {
		  // 组件配置
		};
		</script>

		<style scoped>
		/* 局部样式 */
		</style>
		这种方法适合于你希望 "样式文件" 在多个组件中共享的情况。
		/** 注意事项
			（1）作用域: 在.vue文件中使用<style scoped>可以让样式仅对当前组件生效，
					避免样式冲突。如果你在assets中定义全局样式，需要注意避免样式污染和冲突。
			（2）优化: 对于大的项目，合理组织和拆分CSS文件有助于维护和优化。
				   将通用的样式放在全局文件中，而特定组件的样式则放在对应的.vue文件中。
		*/




//==================================================================（2）优化样式
//==================================================================（2）优化样式
确保你的 CSS 是响应式的，并且适配不同的屏幕尺寸。
使用相对单位（如 "百分比"、"vw/vh"）而不是 "固定的像素值"，
来适配 "不同尺寸的设备"。


响应式设计建议
使用相对单位：在样式中使用相对单位（如 vw, vh, %, em, rem）代替绝对单位（如 px），可以更好地适配不同尺寸的屏幕。
媒体查询：使用 CSS 媒体查询，根据不同设备的特性（如宽度、高度）调整布局和样式。



//==================================================================（3）vw, vh, %, em, rem
//==================================================================（3）vw, vh, %, em, rem
在某些情况下可以只选用一种单位来简化设计，但实际上，
不同的单位有各自的适用场景和优势，
在一个项目中可能会同时使用多种单位来实现更灵活和响应式的设计。
以下是对各单位的简单总结和推荐的使用场景：

（1）rem
	含义：相对于根元素 (<html>) 的字体大小。
	适用场景：通常用于字体大小、间距（如 margin, padding）和布局尺寸等。
			  它提供了一种基于全局基准的相对度量方式，适合全局调整和响应式设计。

（2）em
	含义：相对于其最近的父元素的字体大小。
	适用场景：适合用于与父元素相关的相对大小，
			  比如组件内部的间距、字体大小等。em 单位可以反映嵌套元素的层级关系。

（3）百分比（%）
	含义：相对于父元素的大小。
	适用场景：非常适合用于宽度（width）和高度（height）的相对定位，
			  以及 margin 和 padding 的相对大小设置。
			  百分比在流体布局中尤其有用，可以使元素根据父元素的尺寸变化而变化。

（4）视口单位（vw, vh）
	 含义：相对于视口的宽度和高度。1 vw 等于视口宽度的 1%，1 vh 等于视口高度的 1%。
	 适用场景：常用于需要根据视口尺寸调整的场合，例如全屏背景、响应式字体大小（font-size）等。
			   vw 和 vh 对于创建全屏布局或视口相对尺寸特别有用。

（5）像素（px）
	 含义：绝对单位，表示屏幕上的一个物理像素点。
	 适用场景：尽管 px 是绝对单位，但在某些情况下，
			   它可以提供更精确的控制，例如边框宽度、阴影大小等。通常不建议在响应式设计中大量使用。

//====== 使用建议
//====== 使用建议

全局样式：通常使用 rem 作为全局字体大小和基本尺寸的单位，这样可以通过修改根元素的 font-size 来全局调整比例。
局部调整：在某些特定组件或上下文中，可以使用 em 单位来相对于父元素进行调整。
布局：使用百分比和视口单位来实现流体和响应式布局。例如，设置容器的宽度为 100%，或者设置高度为 100vh 以适应视口的高度。
特殊情况：在需要精确控制的场合（如细边框、图标大小等），可以使用 px。

//==================================================================（3）rem
//==================================================================（3）rem

rem 是一种相对单位，
全称是 "root em"。它在 CSS 中用于相对于根元素（通常是 <html> 元素）的字体大小来设置大小。
rem 单位提供了一种一致的方式来定义尺寸，因为所有使用 rem 的元素都参照相同的基准值。

如何计算 rem

（1）基准值：rem 的基准值是根元素的字体大小，
			 即 <html> 元素的 font-size。如果没有显式设置，浏览器的默认值通常是 16px。

（2）计算方法：1 rem 等于根元素的字体大小。
			 如果根元素的字体大小是 16px，那么 1 rem 就等于 16px。


//================================= 如何计算 rem
//================================= 如何计算 rem

基准值：rem 的基准值是根元素的字体大小，即 <html> 元素的 font-size。
如果没有显式设置，浏览器的默认值通常是 16px。
计算方法：1 rem 等于根元素的字体大小。如果根元素的字体大小是 16px，那么 1 rem 就等于 16px。

//==== 例子
//==== 例子
html {
  font-size: 16px; /* 这是默认值，可以调整 */
}

p {
  font-size: 1.5rem; /* 1.5rem = 1.5 * 16px = 24px */
  margin: 2rem; /* 2rem = 2 * 16px = 32px */
}

//==== 使用 rem 的优点
//==== 使用 rem 的优点
全局一致性：由于 rem 以根元素的字体大小为基准，所以可以通过调整根元素的 font-size 来全局调整所有使用 rem 单位的元素的尺寸。这对于响应式设计特别有用，尤其是当你想要在不同设备上调整整体比例时。

可访问性：使用 rem 单位可以更好地支持用户自定义的浏览器设置。用户如果通过浏览器设置调整了默认字体大小，那么使用 rem 的网站可以根据用户的设置进行调整，提供更好的可读性和可访问性。

灵活性：与固定的像素单位不同，rem 提供了更灵活的布局和排版方式，适应不同屏幕尺寸和设备。



