
部分配置说明：

//=================================================================================================== vue.config.js配置
//=================================================================================================== vue.config.js配置

https://www.jianshu.com/p/b358a91bdf2d



（1）. publicPath 

			Type: string
			Default: '/'

			//部署应用包时的基本 URL， 用法和 webpack 本身的 output.publicPath 一致。
			这个值也可以被设置为空字符串 ('') 或是相对路径 ('./')，
			这样所有的资源都会被链接为相对路径，
			这样打出来的包可以被部署在任意路径。
			//把开发服务器架设在根路径，可以使用一个条件式的值：


（2）. outputDir 

			Type: string
			Default: 'dist'

			输出文件目录，
				当运行 vue-cli-service build 时生成的生产环境构建文件的目录。
				注意目标目录在构建之前会被清除 (构建时传入 --no-clean 可关闭该行为)。


（3）. assetsDir 

			Type: string
			Default: ''

			放置生成的静态资源 (js、css、img、fonts) 的目录。


（4）. indexPath

			Type: string
			Default: 'index.html'

			指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。


（5）. filenameHashing

			Type: boolean
			Default: true

			默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。
			然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。
			如果你无法使用 Vue CLI 生成的 index HTML，
			你可以通过将这个选项设为 false 来关闭文件名哈希。


（6）. pages

			Type: Object
			Default: undefined

			在 multi-page（多页）模式下构建应用。
			每个“page”应该有一个对应的 JavaScript 入口文件。

			其值应该是一个对象，对象的 key 是入口的名字，value 是：

			一个指定了 entry, template, filename, title 和 chunks 的对象 (除了 entry 之外都是可选的)；

			或一个指定其 entry 的字符串。

（7）. pages
 

 

//============================其它配置
//============================其它配置
const webpackConfig = {
	outputDir:
	lintOnSave: 
	transpileDependencies:
			//默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。
	
	headers: true:{}?{"Access-Control-Allow-Origin": "*"} //配置请求头
	
	
	resolve: {
		alias: {
			"@": resolve("../src")
		}
	}
	
	externals:
	
	module:{
		rules: [
			{
				test: /(\.jsx|\.js)$/,
				use: {
					loader: "babel-loader"
				},
				exclude: /node_modules/
			}
		]
	},
	plugins: [
		new WebpackBar()
	],
	resolve:{
		fallback: {
			path: require.resolve("path-browserify")
		}
	}
}











