
https://segmentfault.com/a/1190000019920162

在项目开发中我们难免碰到需要对webpack配置更改的情况，


用chainWebpack做高级配置；包括

//============================================================================================================================================================ 
//============================================================================================================================================================ 
 

Vue CLI 内部的 webpack 配置是通过 webpack-chain 维护的，这个库提供了一个 webpack 原始配置的上层抽象，
使其可以定义具名的 loader 规则和具名插件，并有机会在后期进入这些规则并对它们的选项进行修改。


它允许我们更细粒度的控制其内部配置。
接下来有一些常见的在 vue.config.js 中的 chainWebpack 修改的例子。

//================================================================================= 基本操作
//================================================================================= 基本操作


// vue.config.js
module.exports = {

		  chainWebpack: config => {
			
			
							//========================= 示例一：修改它的选项
							//========================= 示例一：修改它的选项
									config.module
											.rule('vue')
											.use('vue-loader')
											.loader('vue-loader')
											.tap(options => {
												  // 修改它的选项...
												  return options
											});

							//========================= 示例二：添加一个loader
							//========================= 示例二：添加一个loader
									// GraphQL Loader
									config.module
											.rule('graphql')
											.test(/\.graphql$/)
											.use('graphql-tag/loader')
											.loader('graphql-tag/loader')
											.end();
										
								
							//========================= 示例三：替换一个规则里的 Loader
							//========================= 示例三：替换一个规则里的 Loader

									// 添加svg-sprite-loader
									const svgRule = config.module.rule('svg');
									svgRule.uses.clear();
									svgRule
									  .use('svg-sprite-loader')
									  .loader('svg-sprite-loader')
									  .tap(options => {
											options = {
											  symbolId: 'icon-[name]'
											}
											return options
									});
						 

		  }

}

//================================================================================= 修改插件的代码
//================================================================================= 修改插件的代码

 

const path = require('path')
const webpack = require('webpack')
module.exports = {
	
  // 修改output.path
  outputDir: 'dist',
  
  
  // 修改output.publishPath
  publishPath: './',
  
  chainWebpack: config => {
	  

					
					
					//==================================================================================================================
					//==================================================================================================================
					
					// 添加全局 scss 文件
					const types = ['vue-modules', 'vue', 'normal-modules', 'normal']
					types.forEach(type => { //匹配到所有需要导入的文件
								config.module
								.rule('scss')
								.oneOf(type)
								.use('style-resource')
								.loader('style-resources-loader')	//使用 style-resources-loader，可以自动化导入文件；
								.options({
									  patterns: [
										path.resolve(__dirname, 'src/css/base.scss')
									  ]
								});
					});



					// 添加 svg-sprite-loader 加载器，
					// 添加svg-sprite-loader的目的是为了将svg图片转换为svg标签插入html，<svg class="svg-icon"></svg>
					// webpack 里 默认处理 svg的loader 是 file-loader ，所以要移除这个配置：
					const svgRule = config.module.rule('svg');
					svgRule.uses.clear();
					svgRule.use('svg-sprite-loader')
						   .loader('svg-sprite-loader')
						   .tap(options => {
									options = {
										symbolId: 'icon-[name]'
									}
									return options;
							});
 
					// 移除 prefetch 插件 //预加载
					config.plugins.delete('prefetch');
					
					
 
					
					//==================================================================================================================
					//==================================================================================================================

					/**
							//DllReferencePlugin 这个插件是为了使第三方以来和我们自己编写的代码分开打包，提升打包速度；
							//需要和 add-asset-html-webpack-plugin 这个插件一起使用；
							//使用这个插件打包后，在 src/common_chunk 这个文件夹下生成工具库，
							//将第三方依赖打包到一个文件里，并生成一个所有库代码的一个索引 manifest.json 文件					
					*/
					// 引入 DllReferencePlugin
					const chunkFolder = process.env.NODE_ENV !== 'production' ? 'debug' : 'dist'
					config.plugin('dll-reference-plugin')
							.use(webpack.DllReferencePlugin) 
							.tap(options => {
									options[0] = {
									  context: __dirname,
									  manifest: require(path.join(__dirname, `./src/common_chunk/${chunkFolder}/manifest.json`))
									}
									return options;
							});
	  
	   
					//和上面的一起使用
					config.plugin('add-asset-html-webpack-plugin')
							.use('add-asset-html-webpack-plugin')
							.tap(options => {
									options[0] = {
										filepath: path.resolve(__dirname, `./src/common_chunk/${chunkFolder}/lib_*.js`)
									}
									return options;
							});

					//==================================================================================================================
					//==================================================================================================================
	  
	  
	  
  }
}