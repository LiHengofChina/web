

//========================================================================= VUE场景下， chainWebpack 指定 组件入口：
//========================================================================= VUE场景下， chainWebpack 指定 组件入口：

     主要使用 process.env.NODE_ENV === ‘production’判断当前环境，
	 再使用 config.entry(‘app’).clear().add(’…’) 指定入口文件

  
		module.exports = {

		  chainWebpack: (config) => {
			config.resolve.alias
			  //set第一个参数：设置的别名，第二个参数：设置的路径
			  .set('@', resolve('./src'))
			config.when(process.env.NODE_ENV === 'production', config => {
			  // 使用process.env.NODE_ENV判断当前环境，再使用config.entry('app')指定入口文件
			  config.entry('app').clear().add('./src/main-prod.js')  
			})
			config.when(process.env.NODE_ENV === 'development', config => {
			  config.entry('app').clear().add('./src/main-dev.js')
			})
		  }
		};
	
//========================================================================= VUE场景下，组件入口：
//========================================================================= VUE场景下，组件入口：
		
		如果不指定默认找的是 src 下的main.js  和 webpack一样

	





//========================================================================= VUE中默认的 index.html 文件
//========================================================================= VUE中默认的 index.html 文件


main.js是我们的入口文件，主要作用是初始化vue实例并使用需要的插件，
这里new Vue代表新建vue对象。App.vue是我们的主组件，
所有页面都是在App.vue下进行切换的。

vue中的页面都是单页面，但是都是index.html上承载的，
这就是为什么你能在index.html中看到id为app的div，

其实就是和App.vue对应，App.vue里面的标签将会把路由相关内容（index.js）渲染在这个地方，
总之 index.html 是项目运行的入口。

如果什么都不配置，vue.j s会默认生成一个 index.html 这样的文件 。
 
//================================= vue.js 默认寻找的模板是 
//================================= vue.js 默认寻找的模板是 

public/index.html

	如果这个模板不存在，默认生成的index.html 里面id是app
	
	

