
https://www.cnblogs.com/fei-H/p/11349938.html

//=============================================================== 状态管理（vuex）简介
//=============================================================== 状态管理（vuex）简介
 

vuex是专为vue.js应用程序开发的状态管理模式
它采用集中存储管理应用的所有组件的状态，
并以相应的规则保证状态以一种可预测的方式发生变化。
vuex也集成到vue的官方调试工具devtools extension，

提供了诸如零配置的time-travel调试、状态快照导入导出等高级调试功能。

//=============================================================== Vuex 的思想
//=============================================================== Vuex 的思想

当我们在页面上点击一个按钮，

它会触发(dispatch)一个action, 
action 随后会执行(commit)一个mutation, mutation 立即会改变state,
state 改变以后,我们的页面会state 获取数据，页面发生了变化。

Store 对象，包含了我们谈到的所有内容，action, state, mutation，所以是核心了

 
//============== state
//============== state

state为单一状态树，在state中需要定义我们所需要管理的 "数组、对象、字符串" 等等，
只有在这里定义了，在 "vue.js的组件" 中才能获取 "你定义的这个对象" 的状态。

//============== getter  （获取）
//============== getter  （获取）

	getter有点类似vue.js的计算属性，
	当我们需要从store的state中派生出一些状态，
	那么我们就需要使用getter，
	//=======
	getter会接收state作为第一个参数，
	而且getter的返回值会根据它的依赖被缓存起来
	只有getter中的依赖值（state中的某个需要派生状态的值）发生改变的时候才会被重新计算。

//============== mutation  （转变）
//============== mutation  （转变）


	更改store中state状态的唯一方法就是提交mutation
	
	类似事件。
	每个mutation都有一个字符串类型的事件类型和一个回调函数，
	我们需要改变state的值就要在回调函数中改变。
	我们要执行这个回调函数，那么我们需要执行一个相应的调用方法：store.commit。

//============== action
//============== action

	action可以提交mutation，在action中可以执行store.commit，而且action中可以有任何的异步操作。

	在页面中如果我们要嗲用这个action
	则需要执行store.dispatch

//============== module 
//============== module 
		module其实只是解决了当state中很复杂臃肿的时候，
		module可以将store分割成模块，
		每个模块中拥有自己的state、mutation、action和getter。
