
我只是使用了路由，同时把js分割成了小模块，这样就达到  ：
只有在 "特定的路由" 被访问时，"相关的组件" 才会被 "加载到客户端"，
但是我听说 懒加载是另外一种技术 啊

//===================================================================
//===================================================================


"懒加载（Lazy Loading）" 是一个更 "广泛的概念" ，指的是 "延迟加载资源" 的技术。

当谈到 "前端开发" 时，懒加载可以应用于 "多种资源类型"，例如：
		图像
		视频
		脚本
		样式等。

而在 JavaScript 应用程序中， "懒加载" 通常与 "代码分割" 结合使用，
		特别是在使用 "模块化" 打包工具（如 Webpack）时。


//=================================================================== 懒加载 vs. 代码分割
//=================================================================== 懒加载 vs. 代码分割

// 代码分割 
// 代码分割 
是通过将代码 "拆分为多个小块（chunk）"，
使得应用可以 "按需加载" 这些小块。
代码分割通常由 "打包工具（如 Webpack）自动处理"，
它可以将代码分 "割为多个文件" ，以减少 "初始加载" 的大小。

// 懒加载 
// 懒加载 
是一种特定的 " '使用' 代码分割的技术" 策略。
懒加载通常指的是在 "用户需要某些功能时" 才加载 "相关的代码或资源"。

例如，
	（1）当用户 "滚动到页面的某一部分时"，才加载和显示图片，
	     这就是图片的懒加载。
	（2）在 JavaScript 应用程序中，"懒加载" 常常与 "动态导入（import()）" 结合使用，// import() 是一个 JavaScript 动态导入语法，它会返回一个 Promise，
		 以便在 "特定条件下" 加载 "代码模块"。

//===================================================================  对组件进行 "懒加载"，是不是必须先分割代码，配置 splitChunks
//===================================================================  对组件进行 "懒加载"，是不是必须先分割代码，配置 splitChunks

//=== 二者关系
//=== 二者关系

（1）懒加载的实现通常会自动触发代码分割，因为当你使用 import() 动态导入时，Webpack 会自动创建一个独立的 chunk 文件。
（2）代码分割的配置（如 splitChunks）可以影响这些 chunk 的生成规则，如最小/最大大小、缓存组等。

//=== 是否必须配置 splitChunks
//=== 是否必须配置 splitChunks
（1）不一定。懒加载可以独立实现，只需在组件导入时使用动态导入语法即可。
（2）配置 splitChunks 主要是在你需要更细粒度的控制，如调整 chunk 大小、缓存策略、公共代码提取等。

//=== 总结
//=== 总结
不必先配置 splitChunks 才能使用懒加载。
你可以直接使用 Vue 的懒加载功能，Webpack 会自动为这些动态导入的组件创建独立的 chunk。
splitChunks 是一种更高级的优化手段，当你需要精细控制代码分割行为时才需要配置。

