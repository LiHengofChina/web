

"api 文件夹" 通常用于存放与后端通信的相关代码。

//======================================================== 具体来说，这些内容包括：
//======================================================== 具体来说，这些内容包括：

（1）API 请求封装: 将应用中所有的 API 请求集中在一个地方封装起来，
				   通常会创建 "一个或多个服务文件"，
				   如 api.js、userService.js、authService.js 等。
				   这样可以统一管理 API 请求的逻辑，使得代码 "更加清晰和可维护"。

（2）HTTP 请求库的配置: 例如，如果使用 axios 或其他 HTTP 库，
						通常会在 api 文件夹中配置基础实例，
						包括 "基础 URL"、"请求拦截器"、"响应拦截器" 等。
						这样可以 "统一处理请求和响应的逻辑"，比如 "全局错误处理"、"请求头设置" 等。

（3）API 接口方法: 
			定义具体的 API 接口方法，比如 getUserInfo、login、logout 等。
			这些方法通常会返回一个 Promise，以便于在组件中进行链式调用和错误处理。

（4）常量和枚举: 
			有时也会包含一些与 API 请求相关的常量和枚举，
			比如 API 的端点、错误代码等。

//======================================================== 一个简单的 api.js 示例：
//======================================================== 一个简单的 api.js 示例：

// api.js
import axios from 'axios';

// 创建axios实例
const instance = axios.create({
  baseURL: 'https://api.example.com', // 基础URL
  timeout: 10000, // 请求超时时间
});

// 请求拦截器
instance.interceptors.request.use(
  config => {
    // 在发送请求之前做些什么，比如添加 token
    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;
    return config;
  },
  error => {
    // 对请求错误做些什么
    return Promise.reject(error);
  }
);

// 响应拦截器
instance.interceptors.response.use(
  response => {
    // 对响应数据做些什么
    return response.data;
  },
  error => {
    // 对响应错误做些什么
    return Promise.reject(error);
  }
);

// 导出API方法
export const getUserInfo = () => instance.get('/user/info');
export const login = data => instance.post('/auth/login', data);
export const logout = () => instance.post('/auth/logout');
