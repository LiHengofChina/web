
//============================================================ 路由模式
//============================================================ 路由模式

Vue Router 支持多种路由模式，包括  "history 模式" 和 "hash 模式"。

（1）createWebHistory 使用 HTML5 的 History API，需要 "服务器" 支持。

（2）createWebHashHistory 使用 URL 哈希部分 (hash) 创 "建虚拟 URL"，
	 不需要特殊的服务器配置。

//============================================================
//============================================================

指 Vue Router 中的两种主要路由模式：history 模式和hash 模式。
这两种模式决定了应用程序的 "URL 如何表现" 和 "处理"。



//===================（1）. history 模式
//===================（1）. history 模式

	history 模式使用 HTML5 的 "History API"，
	这种模式下的 "URL 结构" 看起来像 "常规 URL" ，而不是以 # 开头的哈希部分。例如：

	https://example.com/home
	https://example.com/about

	这种模式的优点是 URL 更加美观和直观，
	同时也可以与服务器端路由保持一致。

	然而，它需要服务器的配合，
	因为 "刷新页面" 或 "直接访问一个深层次的 URL" 时，
	"服务器" 需要 "正确处理这个请求"，
	并返回应用的 HTML 页面，而不是显示 404 错误。

	例如，如果用户直接访问 https://example.com/about，
	而服务器没有相应的处理逻辑，它可能会返回 404 错误。
	因此，使用 history 模式时，服务器需要设置一个规则，
	使得所有的路由请求都指向应用的入口文件（如 index.html）。

	在 Vue Router 中使用 history 模式时，可以这样创建路由实例：
	import { createRouter, createWebHistory } from 'vue-router';

	const router = createRouter({
	  history: createWebHistory(),
	  routes: [
		// 路由配置
	  ],
	});


//=================== hash 模式
//=================== hash 模式
	hash 模式使用 URL 的哈希部分来模拟完整的 URL，这种模式的 URL 以 # 开头的部分表示路由路径。例如：

	https://example.com/#/home
	https://example.com/#/about

	在 hash 模式下，浏览器不会发送哈希部分给服务器，因此不需要服务器的特殊配置。
	这意味着在用户刷新页面或直接访问某个 URL 时，
	不会出现 404 错误，因为浏览器只会向服务器请求不带哈希部分的 URL。

	由于不需要服务器支持，因此 hash 模式特别适合于静态文件托管的应用程序。
	尽管这种模式的 URL 看起来不如 history 模式下的 URL 美观，但它的兼容性更好，
	也不需要额外的服务器配置。

	在 Vue Router 中使用 hash 模式时，可以这样创建路由实例：
	import { createRouter, createWebHashHistory } from 'vue-router';

	const router = createRouter({
	  history: createWebHashHistory(),
	  routes: [
		// 路由配置
	  ],
	});

//============================================================ 总结：
//============================================================ 总结：

这两种模式提供了不同的 URL 处理方式。
history 模式适用于希望使用常规 URL 的应用程序，
但需要服务器端支持；hash 模式则更为简单，不需要特殊的服务器配置，
更适合静态文件托管的应用。开发者可以根据应用的需求和部署环境选择合适的模式。

