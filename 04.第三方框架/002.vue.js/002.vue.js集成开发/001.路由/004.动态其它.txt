

//============================================================ 动态路由匹配
//============================================================ 动态路由匹配

Vue Router 允许我们定义动态路由匹配，其中 "路径的一部分" 是 "变量"。例如：


const routes = [
  { path: '/user/:id', component: User }
];

在上述示例中，/user/:id 是一个动态路由，:id 是一个变量，可以通过 this.$route.params.id 访问。

//============================================================ 嵌套路由
//============================================================ 嵌套路由
嵌套路由允许在一个路由中嵌套其他子路由。例如：
const routes = [
  {
    path: '/user/:id',
    component: User,
    children: [
      {
        path: 'profile',
        component: UserProfile
      },
      {
        path: 'posts',
        component: UserPosts
      }
    ]
  }
];

//============================================================ 导航守卫
//============================================================ 导航守卫

Vue Router 提供了 "导航守卫" ，用于在 "导航" 发生前进行 "拦截和处理"。

//========== 例如，全局前置守卫：
//========== 例如，全局前置守卫：
router.beforeEach((to, from, next) => {

	if (to.meta.requiresAuth && !isLoggedIn()) {// 检查用户是否已登录
		next({ path: '/login' });
	} else {
		next();
	}

});



//============================================================ 路由模式
//============================================================ 路由模式

Vue Router 支持多种路由模式，包括  "history 模式" 和 "hash 模式"。
（1）createWebHistory 使用 HTML5 的 History API，需要 "服务器" 支持。
（2）createWebHashHistory 使用 URL 哈希部分 (hash) 创 "建虚拟 URL"，不需要特殊的服务器配置。



