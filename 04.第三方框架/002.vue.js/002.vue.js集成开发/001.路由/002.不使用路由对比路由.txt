//============================================================
//============================================================
不使用路由时的组件加载

在不使用 Vue Router 的情况下，
你需要手动在主组件（例如 App.vue）中引入和使用每一个子组件。
这意味着每一个需要显示的组件都必须在父组件的模板中明确地包含。
例如：

<template>
	  <div>
			<img alt="Vue logo" src="./assets/logo.png">
			<HelloWorld msg="Welcome to Your Vue.js App"/>
			<ApprovalForm />
	  </div>
</template>

<script>
import HelloWorld from './components/HelloWorld.vue';
import ApprovalForm from './components/ApprovalForm.vue';

export default {
	  name: 'App',
	  components: {
			HelloWorld,
			ApprovalForm,
	  }
}
</script>

//============================================================
//============================================================

在这种情况下，所有包含在 "模板中的组件" 都会被渲染，
即使这些组件之间可能有 "逻辑上的分支（例如一个是主页，一个是审批页面）"，
它们仍然会 "同时渲染" 出来。
这不符合 "实际应用的需求"，
因为你通常希望根据 "用户的操作" 或 "访问路径" 来显示 "不同的页面或组件"。


//============================================================ 使用路由后的组件加载
//============================================================ 使用路由后的组件加载

引入 Vue Router 后，可以根据 URL 路径来 "动态加载" 和 "渲染组件"。
这样，只有 "匹配当前路径的组件" 才会被渲染，其他组件 "不会被加载和渲染" 。
这不仅 "优化了资源的使用" ，还提高了 "应用的性能" 和 "用户体验" 。


//============================================================
//============================================================

通过使用 Vue Router 和 Webpack 的 "代码分割" 功能，
你可以实现 "按需加载（懒加载）组件" 。
这意味着，只有在 "特定的路由" 被访问时，"相关的组件" 才会被 "加载到客户端"，
这样做有以下几个优点：

	（1）减少初始加载时间: 
			只有在用户访问页面时，
			才加载与该页面相关的 JavaScript 文件，
			这样初始加载时的资源量会更小，
			页面加载速度更快。

	（2）优化资源使用: 不需要一次性加载所有的 JavaScript 代码，
			避免了下载和解析不必要的代码。

	（3）更好的用户体验: 
			由于减少了不必要的资源加载，
			用户体验得到了改善，特别是在网络条件较差的情况下。



const routes = [
  { path: '/', name: 'Home', component: Home },
  { path: '/approval', name: 'Approval', component: ApprovalForm }
];