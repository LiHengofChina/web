
//==================================================== 示例
//==================================================== 示例
import React, { useEffect, useState } from 'react';


{ useEffect, useState } 是 ES6 的解构导入语法，
而前面的 React 是为了 导入默认导出（default export）。


（1）React 导入 React 的默认导出（用于 JSX 解析等）
（2）{ useEffect, useState }	解构导入 React 中的具名导出函数（hooks）

//==================================================== 为什么还需要 React？
//==================================================== 为什么还需要 React？

在旧版 React（17 及以前）中，
JSX 语法编译会自动转成 React.createElement(...)，所以必须显式导入 React。

从 React 17 起 虽然不再强制写 import React，
但很多项目和工具链仍保留它以兼容旧代码和类型声明。

//==================================================== 总结一句话：
//==================================================== 总结一句话：

{ useEffect, useState } 是 解构导入具名方法，
React 是 默认导入整个 React 对象，两者可以同时使用。





前面写 React 是为了提高兼容性，尤其是为了：

//===============================
兼容旧版本 React（17 及以下）

早期版本的 JSX 会被编译成 React.createElement(...)

如果不导入 React，会报错：React is not defined



写上 React 是一种“向下兼容 + 统一代码风格”的做法，不是必须，但更稳妥 